/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var block_pb = require('./block_pb.js');
var transaction_pb = require('./transaction_pb.js');
goog.exportSymbol('proto.zb.api.AccountScriptInfo', null, global);
goog.exportSymbol('proto.zb.api.AccountScriptInfo.ComplexityByVersion', null, global);
goog.exportSymbol('proto.zb.api.AssetDetails', null, global);
goog.exportSymbol('proto.zb.api.BlockMeta', null, global);
goog.exportSymbol('proto.zb.api.DataEntry', null, global);
goog.exportSymbol('proto.zb.api.StaticAssetInfo', null, global);
goog.exportSymbol('proto.zb.api.TransactionData', null, global);
goog.exportSymbol('proto.zb.api.TransactionMeta', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.api.AssetDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.api.AssetDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.api.AssetDetails.displayName = 'proto.zb.api.AssetDetails';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.api.AssetDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.api.AssetDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.api.AssetDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.api.AssetDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName_asB64(),
    description: msg.getDescription_asB64(),
    lastRenamedAt: jspb.Message.getFieldWithDefault(msg, 3, 0),
    reissuable: jspb.Message.getFieldWithDefault(msg, 4, false),
    totalVolume: msg.getTotalVolume_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.api.AssetDetails}
 */
proto.zb.api.AssetDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.api.AssetDetails;
  return proto.zb.api.AssetDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.api.AssetDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.api.AssetDetails}
 */
proto.zb.api.AssetDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLastRenamedAt(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReissuable(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTotalVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.api.AssetDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.api.AssetDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.api.AssetDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.api.AssetDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDescription_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getLastRenamedAt();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getReissuable();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getTotalVolume_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes name = 1;
 * @return {string}
 */
proto.zb.api.AssetDetails.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes name = 1;
 * This is a type-conversion wrapper around `getName()`
 * @return {string}
 */
proto.zb.api.AssetDetails.prototype.getName_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getName()));
};


/**
 * optional bytes name = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getName()`
 * @return {!Uint8Array}
 */
proto.zb.api.AssetDetails.prototype.getName_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getName()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.api.AssetDetails.prototype.setName = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes description = 2;
 * @return {string}
 */
proto.zb.api.AssetDetails.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes description = 2;
 * This is a type-conversion wrapper around `getDescription()`
 * @return {string}
 */
proto.zb.api.AssetDetails.prototype.getDescription_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDescription()));
};


/**
 * optional bytes description = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDescription()`
 * @return {!Uint8Array}
 */
proto.zb.api.AssetDetails.prototype.getDescription_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDescription()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.api.AssetDetails.prototype.setDescription = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int32 last_renamed_at = 3;
 * @return {number}
 */
proto.zb.api.AssetDetails.prototype.getLastRenamedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.zb.api.AssetDetails.prototype.setLastRenamedAt = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool reissuable = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.zb.api.AssetDetails.prototype.getReissuable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.zb.api.AssetDetails.prototype.setReissuable = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bytes total_volume = 5;
 * @return {string}
 */
proto.zb.api.AssetDetails.prototype.getTotalVolume = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes total_volume = 5;
 * This is a type-conversion wrapper around `getTotalVolume()`
 * @return {string}
 */
proto.zb.api.AssetDetails.prototype.getTotalVolume_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTotalVolume()));
};


/**
 * optional bytes total_volume = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTotalVolume()`
 * @return {!Uint8Array}
 */
proto.zb.api.AssetDetails.prototype.getTotalVolume_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTotalVolume()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.api.AssetDetails.prototype.setTotalVolume = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.api.BlockMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.api.BlockMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.api.BlockMeta.displayName = 'proto.zb.api.BlockMeta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.api.BlockMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.api.BlockMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.api.BlockMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.api.BlockMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && block_pb.Block.Header.toObject(includeInstance, f),
    signature: msg.getSignature_asB64(),
    headerHash: msg.getHeaderHash_asB64(),
    height: jspb.Message.getFieldWithDefault(msg, 4, 0),
    size: jspb.Message.getFieldWithDefault(msg, 5, 0),
    transactionCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    totalFeeInWaves: jspb.Message.getFieldWithDefault(msg, 7, 0),
    reward: jspb.Message.getFieldWithDefault(msg, 8, 0),
    vrf: msg.getVrf_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.api.BlockMeta}
 */
proto.zb.api.BlockMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.api.BlockMeta;
  return proto.zb.api.BlockMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.api.BlockMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.api.BlockMeta}
 */
proto.zb.api.BlockMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new block_pb.Block.Header;
      reader.readMessage(value,block_pb.Block.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeaderHash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransactionCount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalFeeInWaves(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReward(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVrf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.api.BlockMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.api.BlockMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.api.BlockMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.api.BlockMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      block_pb.Block.Header.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getHeaderHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTransactionCount();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getTotalFeeInWaves();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getReward();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getVrf_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * optional zb.Block.Header header = 1;
 * @return {?proto.zb.Block.Header}
 */
proto.zb.api.BlockMeta.prototype.getHeader = function() {
  return /** @type{?proto.zb.Block.Header} */ (
    jspb.Message.getWrapperField(this, block_pb.Block.Header, 1));
};


/** @param {?proto.zb.Block.Header|undefined} value */
proto.zb.api.BlockMeta.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zb.api.BlockMeta.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.api.BlockMeta.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {string}
 */
proto.zb.api.BlockMeta.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.zb.api.BlockMeta.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.zb.api.BlockMeta.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.api.BlockMeta.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes header_hash = 3;
 * @return {string}
 */
proto.zb.api.BlockMeta.prototype.getHeaderHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes header_hash = 3;
 * This is a type-conversion wrapper around `getHeaderHash()`
 * @return {string}
 */
proto.zb.api.BlockMeta.prototype.getHeaderHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeaderHash()));
};


/**
 * optional bytes header_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeaderHash()`
 * @return {!Uint8Array}
 */
proto.zb.api.BlockMeta.prototype.getHeaderHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeaderHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.api.BlockMeta.prototype.setHeaderHash = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int32 height = 4;
 * @return {number}
 */
proto.zb.api.BlockMeta.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.zb.api.BlockMeta.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 size = 5;
 * @return {number}
 */
proto.zb.api.BlockMeta.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.zb.api.BlockMeta.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 transaction_count = 6;
 * @return {number}
 */
proto.zb.api.BlockMeta.prototype.getTransactionCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.zb.api.BlockMeta.prototype.setTransactionCount = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 total_fee_in_waves = 7;
 * @return {number}
 */
proto.zb.api.BlockMeta.prototype.getTotalFeeInWaves = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.zb.api.BlockMeta.prototype.setTotalFeeInWaves = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 reward = 8;
 * @return {number}
 */
proto.zb.api.BlockMeta.prototype.getReward = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.zb.api.BlockMeta.prototype.setReward = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bytes vrf = 9;
 * @return {string}
 */
proto.zb.api.BlockMeta.prototype.getVrf = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes vrf = 9;
 * This is a type-conversion wrapper around `getVrf()`
 * @return {string}
 */
proto.zb.api.BlockMeta.prototype.getVrf_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVrf()));
};


/**
 * optional bytes vrf = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVrf()`
 * @return {!Uint8Array}
 */
proto.zb.api.BlockMeta.prototype.getVrf_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVrf()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.api.BlockMeta.prototype.setVrf = function(value) {
  jspb.Message.setProto3BytesField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.api.TransactionMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.api.TransactionMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.api.TransactionMeta.displayName = 'proto.zb.api.TransactionMeta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.api.TransactionMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.api.TransactionMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.api.TransactionMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.api.TransactionMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    num: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    failed: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.api.TransactionMeta}
 */
proto.zb.api.TransactionMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.api.TransactionMeta;
  return proto.zb.api.TransactionMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.api.TransactionMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.api.TransactionMeta}
 */
proto.zb.api.TransactionMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFailed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.api.TransactionMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.api.TransactionMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.api.TransactionMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.api.TransactionMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNum();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFailed();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int32 height = 1;
 * @return {number}
 */
proto.zb.api.TransactionMeta.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.zb.api.TransactionMeta.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 num = 2;
 * @return {number}
 */
proto.zb.api.TransactionMeta.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.zb.api.TransactionMeta.prototype.setNum = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 type = 3;
 * @return {number}
 */
proto.zb.api.TransactionMeta.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.zb.api.TransactionMeta.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool failed = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.zb.api.TransactionMeta.prototype.getFailed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.zb.api.TransactionMeta.prototype.setFailed = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.api.TransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.zb.api.TransactionData.oneofGroups_);
};
goog.inherits(proto.zb.api.TransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.api.TransactionData.displayName = 'proto.zb.api.TransactionData';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.zb.api.TransactionData.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.zb.api.TransactionData.TransactionCase = {
  TRANSACTION_NOT_SET: 0,
  LEGACY_BYTES: 1,
  NEW_TRANSACTION: 2
};

/**
 * @return {proto.zb.api.TransactionData.TransactionCase}
 */
proto.zb.api.TransactionData.prototype.getTransactionCase = function() {
  return /** @type {proto.zb.api.TransactionData.TransactionCase} */(jspb.Message.computeOneofCase(this, proto.zb.api.TransactionData.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.api.TransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.api.TransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.api.TransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.api.TransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    legacyBytes: msg.getLegacyBytes_asB64(),
    newTransaction: (f = msg.getNewTransaction()) && transaction_pb.SignedTransaction.toObject(includeInstance, f),
    failed: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.api.TransactionData}
 */
proto.zb.api.TransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.api.TransactionData;
  return proto.zb.api.TransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.api.TransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.api.TransactionData}
 */
proto.zb.api.TransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLegacyBytes(value);
      break;
    case 2:
      var value = new transaction_pb.SignedTransaction;
      reader.readMessage(value,transaction_pb.SignedTransaction.deserializeBinaryFromReader);
      msg.setNewTransaction(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFailed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.api.TransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.api.TransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.api.TransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.api.TransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNewTransaction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      transaction_pb.SignedTransaction.serializeBinaryToWriter
    );
  }
  f = message.getFailed();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bytes legacy_bytes = 1;
 * @return {string}
 */
proto.zb.api.TransactionData.prototype.getLegacyBytes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes legacy_bytes = 1;
 * This is a type-conversion wrapper around `getLegacyBytes()`
 * @return {string}
 */
proto.zb.api.TransactionData.prototype.getLegacyBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLegacyBytes()));
};


/**
 * optional bytes legacy_bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLegacyBytes()`
 * @return {!Uint8Array}
 */
proto.zb.api.TransactionData.prototype.getLegacyBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLegacyBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.api.TransactionData.prototype.setLegacyBytes = function(value) {
  jspb.Message.setOneofField(this, 1, proto.zb.api.TransactionData.oneofGroups_[0], value);
};


proto.zb.api.TransactionData.prototype.clearLegacyBytes = function() {
  jspb.Message.setOneofField(this, 1, proto.zb.api.TransactionData.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.api.TransactionData.prototype.hasLegacyBytes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional zb.SignedTransaction new_transaction = 2;
 * @return {?proto.zb.SignedTransaction}
 */
proto.zb.api.TransactionData.prototype.getNewTransaction = function() {
  return /** @type{?proto.zb.SignedTransaction} */ (
    jspb.Message.getWrapperField(this, transaction_pb.SignedTransaction, 2));
};


/** @param {?proto.zb.SignedTransaction|undefined} value */
proto.zb.api.TransactionData.prototype.setNewTransaction = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.zb.api.TransactionData.oneofGroups_[0], value);
};


proto.zb.api.TransactionData.prototype.clearNewTransaction = function() {
  this.setNewTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.api.TransactionData.prototype.hasNewTransaction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool failed = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.zb.api.TransactionData.prototype.getFailed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.zb.api.TransactionData.prototype.setFailed = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.api.AccountScriptInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zb.api.AccountScriptInfo.repeatedFields_, null);
};
goog.inherits(proto.zb.api.AccountScriptInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.api.AccountScriptInfo.displayName = 'proto.zb.api.AccountScriptInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zb.api.AccountScriptInfo.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.api.AccountScriptInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.api.AccountScriptInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.api.AccountScriptInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.api.AccountScriptInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: msg.getPublicKey_asB64(),
    scriptBytes: msg.getScriptBytes_asB64(),
    maxComplexity: jspb.Message.getFieldWithDefault(msg, 3, 0),
    callableComplexityList: jspb.Message.toObjectList(msg.getCallableComplexityList(),
    proto.zb.api.AccountScriptInfo.ComplexityByVersion.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.api.AccountScriptInfo}
 */
proto.zb.api.AccountScriptInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.api.AccountScriptInfo;
  return proto.zb.api.AccountScriptInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.api.AccountScriptInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.api.AccountScriptInfo}
 */
proto.zb.api.AccountScriptInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScriptBytes(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxComplexity(value);
      break;
    case 4:
      var value = new proto.zb.api.AccountScriptInfo.ComplexityByVersion;
      reader.readMessage(value,proto.zb.api.AccountScriptInfo.ComplexityByVersion.deserializeBinaryFromReader);
      msg.addCallableComplexity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.api.AccountScriptInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.api.AccountScriptInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.api.AccountScriptInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.api.AccountScriptInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getScriptBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMaxComplexity();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCallableComplexityList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.zb.api.AccountScriptInfo.ComplexityByVersion.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.api.AccountScriptInfo.ComplexityByVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.api.AccountScriptInfo.ComplexityByVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.api.AccountScriptInfo.ComplexityByVersion.displayName = 'proto.zb.api.AccountScriptInfo.ComplexityByVersion';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.api.AccountScriptInfo.ComplexityByVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.api.AccountScriptInfo.ComplexityByVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.api.AccountScriptInfo.ComplexityByVersion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.api.AccountScriptInfo.ComplexityByVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    callableComplexityMap: (f = msg.getCallableComplexityMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.api.AccountScriptInfo.ComplexityByVersion}
 */
proto.zb.api.AccountScriptInfo.ComplexityByVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.api.AccountScriptInfo.ComplexityByVersion;
  return proto.zb.api.AccountScriptInfo.ComplexityByVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.api.AccountScriptInfo.ComplexityByVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.api.AccountScriptInfo.ComplexityByVersion}
 */
proto.zb.api.AccountScriptInfo.ComplexityByVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 2:
      var value = msg.getCallableComplexityMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.api.AccountScriptInfo.ComplexityByVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.api.AccountScriptInfo.ComplexityByVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.api.AccountScriptInfo.ComplexityByVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.api.AccountScriptInfo.ComplexityByVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCallableComplexityMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);
  }
};


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.zb.api.AccountScriptInfo.ComplexityByVersion.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.zb.api.AccountScriptInfo.ComplexityByVersion.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * map<string, int64> callable_complexity = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.zb.api.AccountScriptInfo.ComplexityByVersion.prototype.getCallableComplexityMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


proto.zb.api.AccountScriptInfo.ComplexityByVersion.prototype.clearCallableComplexityMap = function() {
  this.getCallableComplexityMap().clear();
};


/**
 * optional bytes public_key = 1;
 * @return {string}
 */
proto.zb.api.AccountScriptInfo.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.zb.api.AccountScriptInfo.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.zb.api.AccountScriptInfo.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.api.AccountScriptInfo.prototype.setPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes script_bytes = 2;
 * @return {string}
 */
proto.zb.api.AccountScriptInfo.prototype.getScriptBytes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes script_bytes = 2;
 * This is a type-conversion wrapper around `getScriptBytes()`
 * @return {string}
 */
proto.zb.api.AccountScriptInfo.prototype.getScriptBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScriptBytes()));
};


/**
 * optional bytes script_bytes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScriptBytes()`
 * @return {!Uint8Array}
 */
proto.zb.api.AccountScriptInfo.prototype.getScriptBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScriptBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.api.AccountScriptInfo.prototype.setScriptBytes = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int64 max_complexity = 3;
 * @return {number}
 */
proto.zb.api.AccountScriptInfo.prototype.getMaxComplexity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.zb.api.AccountScriptInfo.prototype.setMaxComplexity = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated ComplexityByVersion callable_complexity = 4;
 * @return {!Array<!proto.zb.api.AccountScriptInfo.ComplexityByVersion>}
 */
proto.zb.api.AccountScriptInfo.prototype.getCallableComplexityList = function() {
  return /** @type{!Array<!proto.zb.api.AccountScriptInfo.ComplexityByVersion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zb.api.AccountScriptInfo.ComplexityByVersion, 4));
};


/** @param {!Array<!proto.zb.api.AccountScriptInfo.ComplexityByVersion>} value */
proto.zb.api.AccountScriptInfo.prototype.setCallableComplexityList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.zb.api.AccountScriptInfo.ComplexityByVersion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zb.api.AccountScriptInfo.ComplexityByVersion}
 */
proto.zb.api.AccountScriptInfo.prototype.addCallableComplexity = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.zb.api.AccountScriptInfo.ComplexityByVersion, opt_index);
};


proto.zb.api.AccountScriptInfo.prototype.clearCallableComplexityList = function() {
  this.setCallableComplexityList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.api.StaticAssetInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.api.StaticAssetInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.api.StaticAssetInfo.displayName = 'proto.zb.api.StaticAssetInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.api.StaticAssetInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.api.StaticAssetInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.api.StaticAssetInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.api.StaticAssetInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceId: msg.getSourceId_asB64(),
    issuerPublicKey: msg.getIssuerPublicKey_asB64(),
    decimals: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isNft: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.api.StaticAssetInfo}
 */
proto.zb.api.StaticAssetInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.api.StaticAssetInfo;
  return proto.zb.api.StaticAssetInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.api.StaticAssetInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.api.StaticAssetInfo}
 */
proto.zb.api.StaticAssetInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSourceId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIssuerPublicKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDecimals(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNft(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.api.StaticAssetInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.api.StaticAssetInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.api.StaticAssetInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.api.StaticAssetInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIssuerPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIsNft();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bytes source_id = 1;
 * @return {string}
 */
proto.zb.api.StaticAssetInfo.prototype.getSourceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes source_id = 1;
 * This is a type-conversion wrapper around `getSourceId()`
 * @return {string}
 */
proto.zb.api.StaticAssetInfo.prototype.getSourceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSourceId()));
};


/**
 * optional bytes source_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSourceId()`
 * @return {!Uint8Array}
 */
proto.zb.api.StaticAssetInfo.prototype.getSourceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSourceId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.api.StaticAssetInfo.prototype.setSourceId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes issuer_public_key = 2;
 * @return {string}
 */
proto.zb.api.StaticAssetInfo.prototype.getIssuerPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes issuer_public_key = 2;
 * This is a type-conversion wrapper around `getIssuerPublicKey()`
 * @return {string}
 */
proto.zb.api.StaticAssetInfo.prototype.getIssuerPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIssuerPublicKey()));
};


/**
 * optional bytes issuer_public_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIssuerPublicKey()`
 * @return {!Uint8Array}
 */
proto.zb.api.StaticAssetInfo.prototype.getIssuerPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIssuerPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.api.StaticAssetInfo.prototype.setIssuerPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int32 decimals = 3;
 * @return {number}
 */
proto.zb.api.StaticAssetInfo.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.zb.api.StaticAssetInfo.prototype.setDecimals = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool is_nft = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.zb.api.StaticAssetInfo.prototype.getIsNft = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.zb.api.StaticAssetInfo.prototype.setIsNft = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.api.DataEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.zb.api.DataEntry.oneofGroups_);
};
goog.inherits(proto.zb.api.DataEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.api.DataEntry.displayName = 'proto.zb.api.DataEntry';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.zb.api.DataEntry.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.zb.api.DataEntry.ValueCase = {
  VALUE_NOT_SET: 0,
  INT_VALUE: 1,
  BOOL_VALUE: 2,
  BINARY_VALUE: 3,
  STRING_VALUE: 4
};

/**
 * @return {proto.zb.api.DataEntry.ValueCase}
 */
proto.zb.api.DataEntry.prototype.getValueCase = function() {
  return /** @type {proto.zb.api.DataEntry.ValueCase} */(jspb.Message.computeOneofCase(this, proto.zb.api.DataEntry.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.api.DataEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.api.DataEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.api.DataEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.api.DataEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    intValue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    boolValue: jspb.Message.getFieldWithDefault(msg, 2, false),
    binaryValue: msg.getBinaryValue_asB64(),
    stringValue: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.api.DataEntry}
 */
proto.zb.api.DataEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.api.DataEntry;
  return proto.zb.api.DataEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.api.DataEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.api.DataEntry}
 */
proto.zb.api.DataEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntValue(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBinaryValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.api.DataEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.api.DataEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.api.DataEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.api.DataEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 int_value = 1;
 * @return {number}
 */
proto.zb.api.DataEntry.prototype.getIntValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.zb.api.DataEntry.prototype.setIntValue = function(value) {
  jspb.Message.setOneofField(this, 1, proto.zb.api.DataEntry.oneofGroups_[0], value);
};


proto.zb.api.DataEntry.prototype.clearIntValue = function() {
  jspb.Message.setOneofField(this, 1, proto.zb.api.DataEntry.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.api.DataEntry.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool bool_value = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.zb.api.DataEntry.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.zb.api.DataEntry.prototype.setBoolValue = function(value) {
  jspb.Message.setOneofField(this, 2, proto.zb.api.DataEntry.oneofGroups_[0], value);
};


proto.zb.api.DataEntry.prototype.clearBoolValue = function() {
  jspb.Message.setOneofField(this, 2, proto.zb.api.DataEntry.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.api.DataEntry.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes binary_value = 3;
 * @return {string}
 */
proto.zb.api.DataEntry.prototype.getBinaryValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes binary_value = 3;
 * This is a type-conversion wrapper around `getBinaryValue()`
 * @return {string}
 */
proto.zb.api.DataEntry.prototype.getBinaryValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBinaryValue()));
};


/**
 * optional bytes binary_value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBinaryValue()`
 * @return {!Uint8Array}
 */
proto.zb.api.DataEntry.prototype.getBinaryValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBinaryValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.api.DataEntry.prototype.setBinaryValue = function(value) {
  jspb.Message.setOneofField(this, 3, proto.zb.api.DataEntry.oneofGroups_[0], value);
};


proto.zb.api.DataEntry.prototype.clearBinaryValue = function() {
  jspb.Message.setOneofField(this, 3, proto.zb.api.DataEntry.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.api.DataEntry.prototype.hasBinaryValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string string_value = 4;
 * @return {string}
 */
proto.zb.api.DataEntry.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.zb.api.DataEntry.prototype.setStringValue = function(value) {
  jspb.Message.setOneofField(this, 4, proto.zb.api.DataEntry.oneofGroups_[0], value);
};


proto.zb.api.DataEntry.prototype.clearStringValue = function() {
  jspb.Message.setOneofField(this, 4, proto.zb.api.DataEntry.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.api.DataEntry.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.zb.api);
