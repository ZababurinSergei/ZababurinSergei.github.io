/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var events_pb = require('./events_pb.js');
goog.exportSymbol('proto.zb.events.grpc.GetBlockUpdateRequest', null, global);
goog.exportSymbol('proto.zb.events.grpc.GetBlockUpdateResponse', null, global);
goog.exportSymbol('proto.zb.events.grpc.GetBlockUpdatesRangeRequest', null, global);
goog.exportSymbol('proto.zb.events.grpc.GetBlockUpdatesRangeResponse', null, global);
goog.exportSymbol('proto.zb.events.grpc.SubscribeEvent', null, global);
goog.exportSymbol('proto.zb.events.grpc.SubscribeRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.events.grpc.GetBlockUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.events.grpc.GetBlockUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.events.grpc.GetBlockUpdateRequest.displayName = 'proto.zb.events.grpc.GetBlockUpdateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.events.grpc.GetBlockUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.events.grpc.GetBlockUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.events.grpc.GetBlockUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.events.grpc.GetBlockUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.events.grpc.GetBlockUpdateRequest}
 */
proto.zb.events.grpc.GetBlockUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.events.grpc.GetBlockUpdateRequest;
  return proto.zb.events.grpc.GetBlockUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.events.grpc.GetBlockUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.events.grpc.GetBlockUpdateRequest}
 */
proto.zb.events.grpc.GetBlockUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.events.grpc.GetBlockUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.events.grpc.GetBlockUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.events.grpc.GetBlockUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.events.grpc.GetBlockUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 height = 1;
 * @return {number}
 */
proto.zb.events.grpc.GetBlockUpdateRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.zb.events.grpc.GetBlockUpdateRequest.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.events.grpc.GetBlockUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.events.grpc.GetBlockUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.events.grpc.GetBlockUpdateResponse.displayName = 'proto.zb.events.grpc.GetBlockUpdateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.events.grpc.GetBlockUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.events.grpc.GetBlockUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.events.grpc.GetBlockUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.events.grpc.GetBlockUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    update: (f = msg.getUpdate()) && events_pb.BlockchainUpdated.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.events.grpc.GetBlockUpdateResponse}
 */
proto.zb.events.grpc.GetBlockUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.events.grpc.GetBlockUpdateResponse;
  return proto.zb.events.grpc.GetBlockUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.events.grpc.GetBlockUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.events.grpc.GetBlockUpdateResponse}
 */
proto.zb.events.grpc.GetBlockUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new events_pb.BlockchainUpdated;
      reader.readMessage(value,events_pb.BlockchainUpdated.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.events.grpc.GetBlockUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.events.grpc.GetBlockUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.events.grpc.GetBlockUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.events.grpc.GetBlockUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      events_pb.BlockchainUpdated.serializeBinaryToWriter
    );
  }
};


/**
 * optional zb.events.BlockchainUpdated update = 1;
 * @return {?proto.zb.events.BlockchainUpdated}
 */
proto.zb.events.grpc.GetBlockUpdateResponse.prototype.getUpdate = function() {
  return /** @type{?proto.zb.events.BlockchainUpdated} */ (
    jspb.Message.getWrapperField(this, events_pb.BlockchainUpdated, 1));
};


/** @param {?proto.zb.events.BlockchainUpdated|undefined} value */
proto.zb.events.grpc.GetBlockUpdateResponse.prototype.setUpdate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zb.events.grpc.GetBlockUpdateResponse.prototype.clearUpdate = function() {
  this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.events.grpc.GetBlockUpdateResponse.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.events.grpc.GetBlockUpdatesRangeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.events.grpc.GetBlockUpdatesRangeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.events.grpc.GetBlockUpdatesRangeRequest.displayName = 'proto.zb.events.grpc.GetBlockUpdatesRangeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.events.grpc.GetBlockUpdatesRangeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.events.grpc.GetBlockUpdatesRangeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.events.grpc.GetBlockUpdatesRangeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.events.grpc.GetBlockUpdatesRangeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    toHeight: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.events.grpc.GetBlockUpdatesRangeRequest}
 */
proto.zb.events.grpc.GetBlockUpdatesRangeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.events.grpc.GetBlockUpdatesRangeRequest;
  return proto.zb.events.grpc.GetBlockUpdatesRangeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.events.grpc.GetBlockUpdatesRangeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.events.grpc.GetBlockUpdatesRangeRequest}
 */
proto.zb.events.grpc.GetBlockUpdatesRangeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFromHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setToHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.events.grpc.GetBlockUpdatesRangeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.events.grpc.GetBlockUpdatesRangeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.events.grpc.GetBlockUpdatesRangeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.events.grpc.GetBlockUpdatesRangeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromHeight();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getToHeight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 from_height = 1;
 * @return {number}
 */
proto.zb.events.grpc.GetBlockUpdatesRangeRequest.prototype.getFromHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.zb.events.grpc.GetBlockUpdatesRangeRequest.prototype.setFromHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 to_height = 2;
 * @return {number}
 */
proto.zb.events.grpc.GetBlockUpdatesRangeRequest.prototype.getToHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.zb.events.grpc.GetBlockUpdatesRangeRequest.prototype.setToHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.events.grpc.GetBlockUpdatesRangeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zb.events.grpc.GetBlockUpdatesRangeResponse.repeatedFields_, null);
};
goog.inherits(proto.zb.events.grpc.GetBlockUpdatesRangeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.events.grpc.GetBlockUpdatesRangeResponse.displayName = 'proto.zb.events.grpc.GetBlockUpdatesRangeResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zb.events.grpc.GetBlockUpdatesRangeResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.events.grpc.GetBlockUpdatesRangeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.events.grpc.GetBlockUpdatesRangeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.events.grpc.GetBlockUpdatesRangeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.events.grpc.GetBlockUpdatesRangeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    updatesList: jspb.Message.toObjectList(msg.getUpdatesList(),
    events_pb.BlockchainUpdated.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.events.grpc.GetBlockUpdatesRangeResponse}
 */
proto.zb.events.grpc.GetBlockUpdatesRangeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.events.grpc.GetBlockUpdatesRangeResponse;
  return proto.zb.events.grpc.GetBlockUpdatesRangeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.events.grpc.GetBlockUpdatesRangeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.events.grpc.GetBlockUpdatesRangeResponse}
 */
proto.zb.events.grpc.GetBlockUpdatesRangeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new events_pb.BlockchainUpdated;
      reader.readMessage(value,events_pb.BlockchainUpdated.deserializeBinaryFromReader);
      msg.addUpdates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.events.grpc.GetBlockUpdatesRangeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.events.grpc.GetBlockUpdatesRangeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.events.grpc.GetBlockUpdatesRangeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.events.grpc.GetBlockUpdatesRangeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      events_pb.BlockchainUpdated.serializeBinaryToWriter
    );
  }
};


/**
 * repeated zb.events.BlockchainUpdated updates = 1;
 * @return {!Array<!proto.zb.events.BlockchainUpdated>}
 */
proto.zb.events.grpc.GetBlockUpdatesRangeResponse.prototype.getUpdatesList = function() {
  return /** @type{!Array<!proto.zb.events.BlockchainUpdated>} */ (
    jspb.Message.getRepeatedWrapperField(this, events_pb.BlockchainUpdated, 1));
};


/** @param {!Array<!proto.zb.events.BlockchainUpdated>} value */
proto.zb.events.grpc.GetBlockUpdatesRangeResponse.prototype.setUpdatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.zb.events.BlockchainUpdated=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zb.events.BlockchainUpdated}
 */
proto.zb.events.grpc.GetBlockUpdatesRangeResponse.prototype.addUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.zb.events.BlockchainUpdated, opt_index);
};


proto.zb.events.grpc.GetBlockUpdatesRangeResponse.prototype.clearUpdatesList = function() {
  this.setUpdatesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.events.grpc.SubscribeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.events.grpc.SubscribeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.events.grpc.SubscribeRequest.displayName = 'proto.zb.events.grpc.SubscribeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.events.grpc.SubscribeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.events.grpc.SubscribeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.events.grpc.SubscribeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.events.grpc.SubscribeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    toHeight: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.events.grpc.SubscribeRequest}
 */
proto.zb.events.grpc.SubscribeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.events.grpc.SubscribeRequest;
  return proto.zb.events.grpc.SubscribeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.events.grpc.SubscribeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.events.grpc.SubscribeRequest}
 */
proto.zb.events.grpc.SubscribeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFromHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setToHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.events.grpc.SubscribeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.events.grpc.SubscribeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.events.grpc.SubscribeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.events.grpc.SubscribeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromHeight();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getToHeight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 from_height = 1;
 * @return {number}
 */
proto.zb.events.grpc.SubscribeRequest.prototype.getFromHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.zb.events.grpc.SubscribeRequest.prototype.setFromHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 to_height = 2;
 * @return {number}
 */
proto.zb.events.grpc.SubscribeRequest.prototype.getToHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.zb.events.grpc.SubscribeRequest.prototype.setToHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.events.grpc.SubscribeEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.events.grpc.SubscribeEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.events.grpc.SubscribeEvent.displayName = 'proto.zb.events.grpc.SubscribeEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.events.grpc.SubscribeEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.events.grpc.SubscribeEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.events.grpc.SubscribeEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.events.grpc.SubscribeEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    update: (f = msg.getUpdate()) && events_pb.BlockchainUpdated.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.events.grpc.SubscribeEvent}
 */
proto.zb.events.grpc.SubscribeEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.events.grpc.SubscribeEvent;
  return proto.zb.events.grpc.SubscribeEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.events.grpc.SubscribeEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.events.grpc.SubscribeEvent}
 */
proto.zb.events.grpc.SubscribeEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new events_pb.BlockchainUpdated;
      reader.readMessage(value,events_pb.BlockchainUpdated.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.events.grpc.SubscribeEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.events.grpc.SubscribeEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.events.grpc.SubscribeEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.events.grpc.SubscribeEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      events_pb.BlockchainUpdated.serializeBinaryToWriter
    );
  }
};


/**
 * optional zb.events.BlockchainUpdated update = 1;
 * @return {?proto.zb.events.BlockchainUpdated}
 */
proto.zb.events.grpc.SubscribeEvent.prototype.getUpdate = function() {
  return /** @type{?proto.zb.events.BlockchainUpdated} */ (
    jspb.Message.getWrapperField(this, events_pb.BlockchainUpdated, 1));
};


/** @param {?proto.zb.events.BlockchainUpdated|undefined} value */
proto.zb.events.grpc.SubscribeEvent.prototype.setUpdate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zb.events.grpc.SubscribeEvent.prototype.clearUpdate = function() {
  this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.events.grpc.SubscribeEvent.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.zb.events.grpc);
