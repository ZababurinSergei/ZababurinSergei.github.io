/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var recipient_pb = require('./recipient_pb.js');
var transaction_pb = require('./transaction_pb.js');
var invoke_script_result_pb = require('./invoke_script_result_pb.js');
goog.exportSymbol('proto.zb.node.grpc.ApplicationStatus', null, global);
goog.exportSymbol('proto.zb.node.grpc.CalculateFeeResponse', null, global);
goog.exportSymbol('proto.zb.node.grpc.InvokeScriptResultResponse', null, global);
goog.exportSymbol('proto.zb.node.grpc.SignRequest', null, global);
goog.exportSymbol('proto.zb.node.grpc.TransactionResponse', null, global);
goog.exportSymbol('proto.zb.node.grpc.TransactionStatus', null, global);
goog.exportSymbol('proto.zb.node.grpc.TransactionStatus.Status', null, global);
goog.exportSymbol('proto.zb.node.grpc.TransactionsByIdRequest', null, global);
goog.exportSymbol('proto.zb.node.grpc.TransactionsRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.TransactionStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.node.grpc.TransactionStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.TransactionStatus.displayName = 'proto.zb.node.grpc.TransactionStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.TransactionStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.TransactionStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.TransactionStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.TransactionStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    applicationStatus: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.TransactionStatus}
 */
proto.zb.node.grpc.TransactionStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.TransactionStatus;
  return proto.zb.node.grpc.TransactionStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.TransactionStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.TransactionStatus}
 */
proto.zb.node.grpc.TransactionStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.zb.node.grpc.TransactionStatus.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {!proto.zb.node.grpc.ApplicationStatus} */ (reader.readEnum());
      msg.setApplicationStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.TransactionStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.TransactionStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.TransactionStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.TransactionStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getApplicationStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.zb.node.grpc.TransactionStatus.Status = {
  NOT_EXISTS: 0,
  UNCONFIRMED: 1,
  CONFIRMED: 2
};

/**
 * optional bytes id = 1;
 * @return {string}
 */
proto.zb.node.grpc.TransactionStatus.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.zb.node.grpc.TransactionStatus.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.TransactionStatus.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.TransactionStatus.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.zb.node.grpc.TransactionStatus.Status}
 */
proto.zb.node.grpc.TransactionStatus.prototype.getStatus = function() {
  return /** @type {!proto.zb.node.grpc.TransactionStatus.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.zb.node.grpc.TransactionStatus.Status} value */
proto.zb.node.grpc.TransactionStatus.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 height = 3;
 * @return {number}
 */
proto.zb.node.grpc.TransactionStatus.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.zb.node.grpc.TransactionStatus.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional ApplicationStatus application_status = 4;
 * @return {!proto.zb.node.grpc.ApplicationStatus}
 */
proto.zb.node.grpc.TransactionStatus.prototype.getApplicationStatus = function() {
  return /** @type {!proto.zb.node.grpc.ApplicationStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.zb.node.grpc.ApplicationStatus} value */
proto.zb.node.grpc.TransactionStatus.prototype.setApplicationStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.TransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.node.grpc.TransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.TransactionResponse.displayName = 'proto.zb.node.grpc.TransactionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.TransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.TransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.TransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.TransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    transaction: (f = msg.getTransaction()) && transaction_pb.SignedTransaction.toObject(includeInstance, f),
    applicationStatus: jspb.Message.getFieldWithDefault(msg, 4, 0),
    invokeScriptResult: (f = msg.getInvokeScriptResult()) && invoke_script_result_pb.InvokeScriptResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.TransactionResponse}
 */
proto.zb.node.grpc.TransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.TransactionResponse;
  return proto.zb.node.grpc.TransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.TransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.TransactionResponse}
 */
proto.zb.node.grpc.TransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 3:
      var value = new transaction_pb.SignedTransaction;
      reader.readMessage(value,transaction_pb.SignedTransaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    case 4:
      var value = /** @type {!proto.zb.node.grpc.ApplicationStatus} */ (reader.readEnum());
      msg.setApplicationStatus(value);
      break;
    case 5:
      var value = new invoke_script_result_pb.InvokeScriptResult;
      reader.readMessage(value,invoke_script_result_pb.InvokeScriptResult.deserializeBinaryFromReader);
      msg.setInvokeScriptResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.TransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.TransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.TransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.TransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      transaction_pb.SignedTransaction.serializeBinaryToWriter
    );
  }
  f = message.getApplicationStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getInvokeScriptResult();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      invoke_script_result_pb.InvokeScriptResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {string}
 */
proto.zb.node.grpc.TransactionResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.zb.node.grpc.TransactionResponse.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.TransactionResponse.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.TransactionResponse.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 height = 2;
 * @return {number}
 */
proto.zb.node.grpc.TransactionResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.zb.node.grpc.TransactionResponse.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional zb.SignedTransaction transaction = 3;
 * @return {?proto.zb.SignedTransaction}
 */
proto.zb.node.grpc.TransactionResponse.prototype.getTransaction = function() {
  return /** @type{?proto.zb.SignedTransaction} */ (
    jspb.Message.getWrapperField(this, transaction_pb.SignedTransaction, 3));
};


/** @param {?proto.zb.SignedTransaction|undefined} value */
proto.zb.node.grpc.TransactionResponse.prototype.setTransaction = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.zb.node.grpc.TransactionResponse.prototype.clearTransaction = function() {
  this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.node.grpc.TransactionResponse.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ApplicationStatus application_status = 4;
 * @return {!proto.zb.node.grpc.ApplicationStatus}
 */
proto.zb.node.grpc.TransactionResponse.prototype.getApplicationStatus = function() {
  return /** @type {!proto.zb.node.grpc.ApplicationStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.zb.node.grpc.ApplicationStatus} value */
proto.zb.node.grpc.TransactionResponse.prototype.setApplicationStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional zb.InvokeScriptResult invoke_script_result = 5;
 * @return {?proto.zb.InvokeScriptResult}
 */
proto.zb.node.grpc.TransactionResponse.prototype.getInvokeScriptResult = function() {
  return /** @type{?proto.zb.InvokeScriptResult} */ (
    jspb.Message.getWrapperField(this, invoke_script_result_pb.InvokeScriptResult, 5));
};


/** @param {?proto.zb.InvokeScriptResult|undefined} value */
proto.zb.node.grpc.TransactionResponse.prototype.setInvokeScriptResult = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.zb.node.grpc.TransactionResponse.prototype.clearInvokeScriptResult = function() {
  this.setInvokeScriptResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.node.grpc.TransactionResponse.prototype.hasInvokeScriptResult = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.TransactionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zb.node.grpc.TransactionsRequest.repeatedFields_, null);
};
goog.inherits(proto.zb.node.grpc.TransactionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.TransactionsRequest.displayName = 'proto.zb.node.grpc.TransactionsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zb.node.grpc.TransactionsRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.TransactionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.TransactionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.TransactionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.TransactionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: msg.getSender_asB64(),
    recipient: (f = msg.getRecipient()) && recipient_pb.Recipient.toObject(includeInstance, f),
    transactionIdsList: msg.getTransactionIdsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.TransactionsRequest}
 */
proto.zb.node.grpc.TransactionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.TransactionsRequest;
  return proto.zb.node.grpc.TransactionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.TransactionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.TransactionsRequest}
 */
proto.zb.node.grpc.TransactionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSender(value);
      break;
    case 2:
      var value = new recipient_pb.Recipient;
      reader.readMessage(value,recipient_pb.Recipient.deserializeBinaryFromReader);
      msg.setRecipient(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTransactionIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.TransactionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.TransactionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.TransactionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.TransactionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRecipient();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      recipient_pb.Recipient.serializeBinaryToWriter
    );
  }
  f = message.getTransactionIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes sender = 1;
 * @return {string}
 */
proto.zb.node.grpc.TransactionsRequest.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes sender = 1;
 * This is a type-conversion wrapper around `getSender()`
 * @return {string}
 */
proto.zb.node.grpc.TransactionsRequest.prototype.getSender_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSender()));
};


/**
 * optional bytes sender = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSender()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.TransactionsRequest.prototype.getSender_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSender()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.TransactionsRequest.prototype.setSender = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional zb.Recipient recipient = 2;
 * @return {?proto.zb.Recipient}
 */
proto.zb.node.grpc.TransactionsRequest.prototype.getRecipient = function() {
  return /** @type{?proto.zb.Recipient} */ (
    jspb.Message.getWrapperField(this, recipient_pb.Recipient, 2));
};


/** @param {?proto.zb.Recipient|undefined} value */
proto.zb.node.grpc.TransactionsRequest.prototype.setRecipient = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.zb.node.grpc.TransactionsRequest.prototype.clearRecipient = function() {
  this.setRecipient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.node.grpc.TransactionsRequest.prototype.hasRecipient = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated bytes transaction_ids = 3;
 * @return {!Array<string>}
 */
proto.zb.node.grpc.TransactionsRequest.prototype.getTransactionIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes transaction_ids = 3;
 * This is a type-conversion wrapper around `getTransactionIdsList()`
 * @return {!Array<string>}
 */
proto.zb.node.grpc.TransactionsRequest.prototype.getTransactionIdsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTransactionIdsList()));
};


/**
 * repeated bytes transaction_ids = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionIdsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.zb.node.grpc.TransactionsRequest.prototype.getTransactionIdsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTransactionIdsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.zb.node.grpc.TransactionsRequest.prototype.setTransactionIdsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.zb.node.grpc.TransactionsRequest.prototype.addTransactionIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.zb.node.grpc.TransactionsRequest.prototype.clearTransactionIdsList = function() {
  this.setTransactionIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.TransactionsByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zb.node.grpc.TransactionsByIdRequest.repeatedFields_, null);
};
goog.inherits(proto.zb.node.grpc.TransactionsByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.TransactionsByIdRequest.displayName = 'proto.zb.node.grpc.TransactionsByIdRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zb.node.grpc.TransactionsByIdRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.TransactionsByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.TransactionsByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.TransactionsByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.TransactionsByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionIdsList: msg.getTransactionIdsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.TransactionsByIdRequest}
 */
proto.zb.node.grpc.TransactionsByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.TransactionsByIdRequest;
  return proto.zb.node.grpc.TransactionsByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.TransactionsByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.TransactionsByIdRequest}
 */
proto.zb.node.grpc.TransactionsByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTransactionIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.TransactionsByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.TransactionsByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.TransactionsByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.TransactionsByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
};


/**
 * repeated bytes transaction_ids = 3;
 * @return {!Array<string>}
 */
proto.zb.node.grpc.TransactionsByIdRequest.prototype.getTransactionIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes transaction_ids = 3;
 * This is a type-conversion wrapper around `getTransactionIdsList()`
 * @return {!Array<string>}
 */
proto.zb.node.grpc.TransactionsByIdRequest.prototype.getTransactionIdsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTransactionIdsList()));
};


/**
 * repeated bytes transaction_ids = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionIdsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.zb.node.grpc.TransactionsByIdRequest.prototype.getTransactionIdsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTransactionIdsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.zb.node.grpc.TransactionsByIdRequest.prototype.setTransactionIdsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.zb.node.grpc.TransactionsByIdRequest.prototype.addTransactionIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.zb.node.grpc.TransactionsByIdRequest.prototype.clearTransactionIdsList = function() {
  this.setTransactionIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.CalculateFeeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.node.grpc.CalculateFeeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.CalculateFeeResponse.displayName = 'proto.zb.node.grpc.CalculateFeeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.CalculateFeeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.CalculateFeeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.CalculateFeeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.CalculateFeeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: msg.getAssetId_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.CalculateFeeResponse}
 */
proto.zb.node.grpc.CalculateFeeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.CalculateFeeResponse;
  return proto.zb.node.grpc.CalculateFeeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.CalculateFeeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.CalculateFeeResponse}
 */
proto.zb.node.grpc.CalculateFeeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.CalculateFeeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.CalculateFeeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.CalculateFeeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.CalculateFeeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bytes asset_id = 1;
 * @return {string}
 */
proto.zb.node.grpc.CalculateFeeResponse.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes asset_id = 1;
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {string}
 */
proto.zb.node.grpc.CalculateFeeResponse.prototype.getAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetId()));
};


/**
 * optional bytes asset_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.CalculateFeeResponse.prototype.getAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.CalculateFeeResponse.prototype.setAssetId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.zb.node.grpc.CalculateFeeResponse.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.zb.node.grpc.CalculateFeeResponse.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.SignRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.node.grpc.SignRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.SignRequest.displayName = 'proto.zb.node.grpc.SignRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.SignRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.SignRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.SignRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.SignRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: (f = msg.getTransaction()) && transaction_pb.Transaction.toObject(includeInstance, f),
    signerPublicKey: msg.getSignerPublicKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.SignRequest}
 */
proto.zb.node.grpc.SignRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.SignRequest;
  return proto.zb.node.grpc.SignRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.SignRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.SignRequest}
 */
proto.zb.node.grpc.SignRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new transaction_pb.Transaction;
      reader.readMessage(value,transaction_pb.Transaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignerPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.SignRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.SignRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.SignRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.SignRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      transaction_pb.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getSignerPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional zb.Transaction transaction = 1;
 * @return {?proto.zb.Transaction}
 */
proto.zb.node.grpc.SignRequest.prototype.getTransaction = function() {
  return /** @type{?proto.zb.Transaction} */ (
    jspb.Message.getWrapperField(this, transaction_pb.Transaction, 1));
};


/** @param {?proto.zb.Transaction|undefined} value */
proto.zb.node.grpc.SignRequest.prototype.setTransaction = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zb.node.grpc.SignRequest.prototype.clearTransaction = function() {
  this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.node.grpc.SignRequest.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signer_public_key = 2;
 * @return {string}
 */
proto.zb.node.grpc.SignRequest.prototype.getSignerPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signer_public_key = 2;
 * This is a type-conversion wrapper around `getSignerPublicKey()`
 * @return {string}
 */
proto.zb.node.grpc.SignRequest.prototype.getSignerPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignerPublicKey()));
};


/**
 * optional bytes signer_public_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignerPublicKey()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.SignRequest.prototype.getSignerPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignerPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.SignRequest.prototype.setSignerPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.InvokeScriptResultResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.node.grpc.InvokeScriptResultResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.InvokeScriptResultResponse.displayName = 'proto.zb.node.grpc.InvokeScriptResultResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.InvokeScriptResultResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.InvokeScriptResultResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.InvokeScriptResultResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.InvokeScriptResultResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: (f = msg.getTransaction()) && transaction_pb.SignedTransaction.toObject(includeInstance, f),
    result: (f = msg.getResult()) && invoke_script_result_pb.InvokeScriptResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.InvokeScriptResultResponse}
 */
proto.zb.node.grpc.InvokeScriptResultResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.InvokeScriptResultResponse;
  return proto.zb.node.grpc.InvokeScriptResultResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.InvokeScriptResultResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.InvokeScriptResultResponse}
 */
proto.zb.node.grpc.InvokeScriptResultResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new transaction_pb.SignedTransaction;
      reader.readMessage(value,transaction_pb.SignedTransaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    case 2:
      var value = new invoke_script_result_pb.InvokeScriptResult;
      reader.readMessage(value,invoke_script_result_pb.InvokeScriptResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.InvokeScriptResultResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.InvokeScriptResultResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.InvokeScriptResultResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.InvokeScriptResultResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      transaction_pb.SignedTransaction.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      invoke_script_result_pb.InvokeScriptResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional zb.SignedTransaction transaction = 1;
 * @return {?proto.zb.SignedTransaction}
 */
proto.zb.node.grpc.InvokeScriptResultResponse.prototype.getTransaction = function() {
  return /** @type{?proto.zb.SignedTransaction} */ (
    jspb.Message.getWrapperField(this, transaction_pb.SignedTransaction, 1));
};


/** @param {?proto.zb.SignedTransaction|undefined} value */
proto.zb.node.grpc.InvokeScriptResultResponse.prototype.setTransaction = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zb.node.grpc.InvokeScriptResultResponse.prototype.clearTransaction = function() {
  this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.node.grpc.InvokeScriptResultResponse.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional zb.InvokeScriptResult result = 2;
 * @return {?proto.zb.InvokeScriptResult}
 */
proto.zb.node.grpc.InvokeScriptResultResponse.prototype.getResult = function() {
  return /** @type{?proto.zb.InvokeScriptResult} */ (
    jspb.Message.getWrapperField(this, invoke_script_result_pb.InvokeScriptResult, 2));
};


/** @param {?proto.zb.InvokeScriptResult|undefined} value */
proto.zb.node.grpc.InvokeScriptResultResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.zb.node.grpc.InvokeScriptResultResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.node.grpc.InvokeScriptResultResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.zb.node.grpc.ApplicationStatus = {
  UNKNOWN: 0,
  SUCCEEDED: 1,
  SCRIPT_EXECUTION_FAILED: 2
};

goog.object.extend(exports, proto.zb.node.grpc);
