/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var amount_pb = require('./amount_pb.js');
var recipient_pb = require('./recipient_pb.js');
var order_pb = require('./order_pb.js');
goog.exportSymbol('proto.zb.BurnTransactionData', null, global);
goog.exportSymbol('proto.zb.CreateAliasTransactionData', null, global);
goog.exportSymbol('proto.zb.DataTransactionData', null, global);
goog.exportSymbol('proto.zb.DataTransactionData.DataEntry', null, global);
goog.exportSymbol('proto.zb.ExchangeTransactionData', null, global);
goog.exportSymbol('proto.zb.GenesisTransactionData', null, global);
goog.exportSymbol('proto.zb.InvokeScriptTransactionData', null, global);
goog.exportSymbol('proto.zb.IssueTransactionData', null, global);
goog.exportSymbol('proto.zb.LeaseCancelTransactionData', null, global);
goog.exportSymbol('proto.zb.LeaseTransactionData', null, global);
goog.exportSymbol('proto.zb.MassTransferTransactionData', null, global);
goog.exportSymbol('proto.zb.MassTransferTransactionData.Transfer', null, global);
goog.exportSymbol('proto.zb.PaymentTransactionData', null, global);
goog.exportSymbol('proto.zb.ReissueTransactionData', null, global);
goog.exportSymbol('proto.zb.SetAssetScriptTransactionData', null, global);
goog.exportSymbol('proto.zb.SetScriptTransactionData', null, global);
goog.exportSymbol('proto.zb.SignedTransaction', null, global);
goog.exportSymbol('proto.zb.SponsorFeeTransactionData', null, global);
goog.exportSymbol('proto.zb.Transaction', null, global);
goog.exportSymbol('proto.zb.TransferTransactionData', null, global);
goog.exportSymbol('proto.zb.UpdateAssetInfoTransactionData', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.SignedTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zb.SignedTransaction.repeatedFields_, null);
};
goog.inherits(proto.zb.SignedTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.SignedTransaction.displayName = 'proto.zb.SignedTransaction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zb.SignedTransaction.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.SignedTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.SignedTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.SignedTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.SignedTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: (f = msg.getTransaction()) && proto.zb.Transaction.toObject(includeInstance, f),
    proofsList: msg.getProofsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.SignedTransaction}
 */
proto.zb.SignedTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.SignedTransaction;
  return proto.zb.SignedTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.SignedTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.SignedTransaction}
 */
proto.zb.SignedTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.zb.Transaction;
      reader.readMessage(value,proto.zb.Transaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addProofs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.SignedTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.SignedTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.SignedTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.SignedTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.zb.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getProofsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional Transaction transaction = 1;
 * @return {?proto.zb.Transaction}
 */
proto.zb.SignedTransaction.prototype.getTransaction = function() {
  return /** @type{?proto.zb.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.zb.Transaction, 1));
};


/** @param {?proto.zb.Transaction|undefined} value */
proto.zb.SignedTransaction.prototype.setTransaction = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zb.SignedTransaction.prototype.clearTransaction = function() {
  this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.SignedTransaction.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated bytes proofs = 2;
 * @return {!Array<string>}
 */
proto.zb.SignedTransaction.prototype.getProofsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes proofs = 2;
 * This is a type-conversion wrapper around `getProofsList()`
 * @return {!Array<string>}
 */
proto.zb.SignedTransaction.prototype.getProofsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getProofsList()));
};


/**
 * repeated bytes proofs = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.zb.SignedTransaction.prototype.getProofsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getProofsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.zb.SignedTransaction.prototype.setProofsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.zb.SignedTransaction.prototype.addProofs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.zb.SignedTransaction.prototype.clearProofsList = function() {
  this.setProofsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.zb.Transaction.oneofGroups_);
};
goog.inherits(proto.zb.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.Transaction.displayName = 'proto.zb.Transaction';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.zb.Transaction.oneofGroups_ = [[101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117]];

/**
 * @enum {number}
 */
proto.zb.Transaction.DataCase = {
  DATA_NOT_SET: 0,
  GENESIS: 101,
  PAYMENT: 102,
  ISSUE: 103,
  TRANSFER: 104,
  REISSUE: 105,
  BURN: 106,
  EXCHANGE: 107,
  LEASE: 108,
  LEASE_CANCEL: 109,
  CREATE_ALIAS: 110,
  MASS_TRANSFER: 111,
  DATA_TRANSACTION: 112,
  SET_SCRIPT: 113,
  SPONSOR_FEE: 114,
  SET_ASSET_SCRIPT: 115,
  INVOKE_SCRIPT: 116,
  UPDATE_ASSET_INFO: 117
};

/**
 * @return {proto.zb.Transaction.DataCase}
 */
proto.zb.Transaction.prototype.getDataCase = function() {
  return /** @type {proto.zb.Transaction.DataCase} */(jspb.Message.computeOneofCase(this, proto.zb.Transaction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    senderPublicKey: msg.getSenderPublicKey_asB64(),
    fee: (f = msg.getFee()) && amount_pb.Amount.toObject(includeInstance, f),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    version: jspb.Message.getFieldWithDefault(msg, 5, 0),
    genesis: (f = msg.getGenesis()) && proto.zb.GenesisTransactionData.toObject(includeInstance, f),
    payment: (f = msg.getPayment()) && proto.zb.PaymentTransactionData.toObject(includeInstance, f),
    issue: (f = msg.getIssue()) && proto.zb.IssueTransactionData.toObject(includeInstance, f),
    transfer: (f = msg.getTransfer()) && proto.zb.TransferTransactionData.toObject(includeInstance, f),
    reissue: (f = msg.getReissue()) && proto.zb.ReissueTransactionData.toObject(includeInstance, f),
    burn: (f = msg.getBurn()) && proto.zb.BurnTransactionData.toObject(includeInstance, f),
    exchange: (f = msg.getExchange()) && proto.zb.ExchangeTransactionData.toObject(includeInstance, f),
    lease: (f = msg.getLease()) && proto.zb.LeaseTransactionData.toObject(includeInstance, f),
    leaseCancel: (f = msg.getLeaseCancel()) && proto.zb.LeaseCancelTransactionData.toObject(includeInstance, f),
    createAlias: (f = msg.getCreateAlias()) && proto.zb.CreateAliasTransactionData.toObject(includeInstance, f),
    massTransfer: (f = msg.getMassTransfer()) && proto.zb.MassTransferTransactionData.toObject(includeInstance, f),
    dataTransaction: (f = msg.getDataTransaction()) && proto.zb.DataTransactionData.toObject(includeInstance, f),
    setScript: (f = msg.getSetScript()) && proto.zb.SetScriptTransactionData.toObject(includeInstance, f),
    sponsorFee: (f = msg.getSponsorFee()) && proto.zb.SponsorFeeTransactionData.toObject(includeInstance, f),
    setAssetScript: (f = msg.getSetAssetScript()) && proto.zb.SetAssetScriptTransactionData.toObject(includeInstance, f),
    invokeScript: (f = msg.getInvokeScript()) && proto.zb.InvokeScriptTransactionData.toObject(includeInstance, f),
    updateAssetInfo: (f = msg.getUpdateAssetInfo()) && proto.zb.UpdateAssetInfoTransactionData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.Transaction}
 */
proto.zb.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.Transaction;
  return proto.zb.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.Transaction}
 */
proto.zb.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSenderPublicKey(value);
      break;
    case 3:
      var value = new amount_pb.Amount;
      reader.readMessage(value,amount_pb.Amount.deserializeBinaryFromReader);
      msg.setFee(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 101:
      var value = new proto.zb.GenesisTransactionData;
      reader.readMessage(value,proto.zb.GenesisTransactionData.deserializeBinaryFromReader);
      msg.setGenesis(value);
      break;
    case 102:
      var value = new proto.zb.PaymentTransactionData;
      reader.readMessage(value,proto.zb.PaymentTransactionData.deserializeBinaryFromReader);
      msg.setPayment(value);
      break;
    case 103:
      var value = new proto.zb.IssueTransactionData;
      reader.readMessage(value,proto.zb.IssueTransactionData.deserializeBinaryFromReader);
      msg.setIssue(value);
      break;
    case 104:
      var value = new proto.zb.TransferTransactionData;
      reader.readMessage(value,proto.zb.TransferTransactionData.deserializeBinaryFromReader);
      msg.setTransfer(value);
      break;
    case 105:
      var value = new proto.zb.ReissueTransactionData;
      reader.readMessage(value,proto.zb.ReissueTransactionData.deserializeBinaryFromReader);
      msg.setReissue(value);
      break;
    case 106:
      var value = new proto.zb.BurnTransactionData;
      reader.readMessage(value,proto.zb.BurnTransactionData.deserializeBinaryFromReader);
      msg.setBurn(value);
      break;
    case 107:
      var value = new proto.zb.ExchangeTransactionData;
      reader.readMessage(value,proto.zb.ExchangeTransactionData.deserializeBinaryFromReader);
      msg.setExchange(value);
      break;
    case 108:
      var value = new proto.zb.LeaseTransactionData;
      reader.readMessage(value,proto.zb.LeaseTransactionData.deserializeBinaryFromReader);
      msg.setLease(value);
      break;
    case 109:
      var value = new proto.zb.LeaseCancelTransactionData;
      reader.readMessage(value,proto.zb.LeaseCancelTransactionData.deserializeBinaryFromReader);
      msg.setLeaseCancel(value);
      break;
    case 110:
      var value = new proto.zb.CreateAliasTransactionData;
      reader.readMessage(value,proto.zb.CreateAliasTransactionData.deserializeBinaryFromReader);
      msg.setCreateAlias(value);
      break;
    case 111:
      var value = new proto.zb.MassTransferTransactionData;
      reader.readMessage(value,proto.zb.MassTransferTransactionData.deserializeBinaryFromReader);
      msg.setMassTransfer(value);
      break;
    case 112:
      var value = new proto.zb.DataTransactionData;
      reader.readMessage(value,proto.zb.DataTransactionData.deserializeBinaryFromReader);
      msg.setDataTransaction(value);
      break;
    case 113:
      var value = new proto.zb.SetScriptTransactionData;
      reader.readMessage(value,proto.zb.SetScriptTransactionData.deserializeBinaryFromReader);
      msg.setSetScript(value);
      break;
    case 114:
      var value = new proto.zb.SponsorFeeTransactionData;
      reader.readMessage(value,proto.zb.SponsorFeeTransactionData.deserializeBinaryFromReader);
      msg.setSponsorFee(value);
      break;
    case 115:
      var value = new proto.zb.SetAssetScriptTransactionData;
      reader.readMessage(value,proto.zb.SetAssetScriptTransactionData.deserializeBinaryFromReader);
      msg.setSetAssetScript(value);
      break;
    case 116:
      var value = new proto.zb.InvokeScriptTransactionData;
      reader.readMessage(value,proto.zb.InvokeScriptTransactionData.deserializeBinaryFromReader);
      msg.setInvokeScript(value);
      break;
    case 117:
      var value = new proto.zb.UpdateAssetInfoTransactionData;
      reader.readMessage(value,proto.zb.UpdateAssetInfoTransactionData.deserializeBinaryFromReader);
      msg.setUpdateAssetInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSenderPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getFee();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      amount_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getGenesis();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.zb.GenesisTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getPayment();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.zb.PaymentTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getIssue();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      proto.zb.IssueTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getTransfer();
  if (f != null) {
    writer.writeMessage(
      104,
      f,
      proto.zb.TransferTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getReissue();
  if (f != null) {
    writer.writeMessage(
      105,
      f,
      proto.zb.ReissueTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getBurn();
  if (f != null) {
    writer.writeMessage(
      106,
      f,
      proto.zb.BurnTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getExchange();
  if (f != null) {
    writer.writeMessage(
      107,
      f,
      proto.zb.ExchangeTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getLease();
  if (f != null) {
    writer.writeMessage(
      108,
      f,
      proto.zb.LeaseTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getLeaseCancel();
  if (f != null) {
    writer.writeMessage(
      109,
      f,
      proto.zb.LeaseCancelTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getCreateAlias();
  if (f != null) {
    writer.writeMessage(
      110,
      f,
      proto.zb.CreateAliasTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getMassTransfer();
  if (f != null) {
    writer.writeMessage(
      111,
      f,
      proto.zb.MassTransferTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getDataTransaction();
  if (f != null) {
    writer.writeMessage(
      112,
      f,
      proto.zb.DataTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getSetScript();
  if (f != null) {
    writer.writeMessage(
      113,
      f,
      proto.zb.SetScriptTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getSponsorFee();
  if (f != null) {
    writer.writeMessage(
      114,
      f,
      proto.zb.SponsorFeeTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getSetAssetScript();
  if (f != null) {
    writer.writeMessage(
      115,
      f,
      proto.zb.SetAssetScriptTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getInvokeScript();
  if (f != null) {
    writer.writeMessage(
      116,
      f,
      proto.zb.InvokeScriptTransactionData.serializeBinaryToWriter
    );
  }
  f = message.getUpdateAssetInfo();
  if (f != null) {
    writer.writeMessage(
      117,
      f,
      proto.zb.UpdateAssetInfoTransactionData.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 chain_id = 1;
 * @return {number}
 */
proto.zb.Transaction.prototype.getChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.zb.Transaction.prototype.setChainId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes sender_public_key = 2;
 * @return {string}
 */
proto.zb.Transaction.prototype.getSenderPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sender_public_key = 2;
 * This is a type-conversion wrapper around `getSenderPublicKey()`
 * @return {string}
 */
proto.zb.Transaction.prototype.getSenderPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSenderPublicKey()));
};


/**
 * optional bytes sender_public_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderPublicKey()`
 * @return {!Uint8Array}
 */
proto.zb.Transaction.prototype.getSenderPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSenderPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.Transaction.prototype.setSenderPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Amount fee = 3;
 * @return {?proto.zb.Amount}
 */
proto.zb.Transaction.prototype.getFee = function() {
  return /** @type{?proto.zb.Amount} */ (
    jspb.Message.getWrapperField(this, amount_pb.Amount, 3));
};


/** @param {?proto.zb.Amount|undefined} value */
proto.zb.Transaction.prototype.setFee = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.zb.Transaction.prototype.clearFee = function() {
  this.setFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Transaction.prototype.hasFee = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.zb.Transaction.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.zb.Transaction.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 version = 5;
 * @return {number}
 */
proto.zb.Transaction.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.zb.Transaction.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional GenesisTransactionData genesis = 101;
 * @return {?proto.zb.GenesisTransactionData}
 */
proto.zb.Transaction.prototype.getGenesis = function() {
  return /** @type{?proto.zb.GenesisTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.zb.GenesisTransactionData, 101));
};


/** @param {?proto.zb.GenesisTransactionData|undefined} value */
proto.zb.Transaction.prototype.setGenesis = function(value) {
  jspb.Message.setOneofWrapperField(this, 101, proto.zb.Transaction.oneofGroups_[0], value);
};


proto.zb.Transaction.prototype.clearGenesis = function() {
  this.setGenesis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Transaction.prototype.hasGenesis = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional PaymentTransactionData payment = 102;
 * @return {?proto.zb.PaymentTransactionData}
 */
proto.zb.Transaction.prototype.getPayment = function() {
  return /** @type{?proto.zb.PaymentTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.zb.PaymentTransactionData, 102));
};


/** @param {?proto.zb.PaymentTransactionData|undefined} value */
proto.zb.Transaction.prototype.setPayment = function(value) {
  jspb.Message.setOneofWrapperField(this, 102, proto.zb.Transaction.oneofGroups_[0], value);
};


proto.zb.Transaction.prototype.clearPayment = function() {
  this.setPayment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Transaction.prototype.hasPayment = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional IssueTransactionData issue = 103;
 * @return {?proto.zb.IssueTransactionData}
 */
proto.zb.Transaction.prototype.getIssue = function() {
  return /** @type{?proto.zb.IssueTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.zb.IssueTransactionData, 103));
};


/** @param {?proto.zb.IssueTransactionData|undefined} value */
proto.zb.Transaction.prototype.setIssue = function(value) {
  jspb.Message.setOneofWrapperField(this, 103, proto.zb.Transaction.oneofGroups_[0], value);
};


proto.zb.Transaction.prototype.clearIssue = function() {
  this.setIssue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Transaction.prototype.hasIssue = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional TransferTransactionData transfer = 104;
 * @return {?proto.zb.TransferTransactionData}
 */
proto.zb.Transaction.prototype.getTransfer = function() {
  return /** @type{?proto.zb.TransferTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.zb.TransferTransactionData, 104));
};


/** @param {?proto.zb.TransferTransactionData|undefined} value */
proto.zb.Transaction.prototype.setTransfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 104, proto.zb.Transaction.oneofGroups_[0], value);
};


proto.zb.Transaction.prototype.clearTransfer = function() {
  this.setTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Transaction.prototype.hasTransfer = function() {
  return jspb.Message.getField(this, 104) != null;
};


/**
 * optional ReissueTransactionData reissue = 105;
 * @return {?proto.zb.ReissueTransactionData}
 */
proto.zb.Transaction.prototype.getReissue = function() {
  return /** @type{?proto.zb.ReissueTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.zb.ReissueTransactionData, 105));
};


/** @param {?proto.zb.ReissueTransactionData|undefined} value */
proto.zb.Transaction.prototype.setReissue = function(value) {
  jspb.Message.setOneofWrapperField(this, 105, proto.zb.Transaction.oneofGroups_[0], value);
};


proto.zb.Transaction.prototype.clearReissue = function() {
  this.setReissue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Transaction.prototype.hasReissue = function() {
  return jspb.Message.getField(this, 105) != null;
};


/**
 * optional BurnTransactionData burn = 106;
 * @return {?proto.zb.BurnTransactionData}
 */
proto.zb.Transaction.prototype.getBurn = function() {
  return /** @type{?proto.zb.BurnTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.zb.BurnTransactionData, 106));
};


/** @param {?proto.zb.BurnTransactionData|undefined} value */
proto.zb.Transaction.prototype.setBurn = function(value) {
  jspb.Message.setOneofWrapperField(this, 106, proto.zb.Transaction.oneofGroups_[0], value);
};


proto.zb.Transaction.prototype.clearBurn = function() {
  this.setBurn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Transaction.prototype.hasBurn = function() {
  return jspb.Message.getField(this, 106) != null;
};


/**
 * optional ExchangeTransactionData exchange = 107;
 * @return {?proto.zb.ExchangeTransactionData}
 */
proto.zb.Transaction.prototype.getExchange = function() {
  return /** @type{?proto.zb.ExchangeTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.zb.ExchangeTransactionData, 107));
};


/** @param {?proto.zb.ExchangeTransactionData|undefined} value */
proto.zb.Transaction.prototype.setExchange = function(value) {
  jspb.Message.setOneofWrapperField(this, 107, proto.zb.Transaction.oneofGroups_[0], value);
};


proto.zb.Transaction.prototype.clearExchange = function() {
  this.setExchange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Transaction.prototype.hasExchange = function() {
  return jspb.Message.getField(this, 107) != null;
};


/**
 * optional LeaseTransactionData lease = 108;
 * @return {?proto.zb.LeaseTransactionData}
 */
proto.zb.Transaction.prototype.getLease = function() {
  return /** @type{?proto.zb.LeaseTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.zb.LeaseTransactionData, 108));
};


/** @param {?proto.zb.LeaseTransactionData|undefined} value */
proto.zb.Transaction.prototype.setLease = function(value) {
  jspb.Message.setOneofWrapperField(this, 108, proto.zb.Transaction.oneofGroups_[0], value);
};


proto.zb.Transaction.prototype.clearLease = function() {
  this.setLease(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Transaction.prototype.hasLease = function() {
  return jspb.Message.getField(this, 108) != null;
};


/**
 * optional LeaseCancelTransactionData lease_cancel = 109;
 * @return {?proto.zb.LeaseCancelTransactionData}
 */
proto.zb.Transaction.prototype.getLeaseCancel = function() {
  return /** @type{?proto.zb.LeaseCancelTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.zb.LeaseCancelTransactionData, 109));
};


/** @param {?proto.zb.LeaseCancelTransactionData|undefined} value */
proto.zb.Transaction.prototype.setLeaseCancel = function(value) {
  jspb.Message.setOneofWrapperField(this, 109, proto.zb.Transaction.oneofGroups_[0], value);
};


proto.zb.Transaction.prototype.clearLeaseCancel = function() {
  this.setLeaseCancel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Transaction.prototype.hasLeaseCancel = function() {
  return jspb.Message.getField(this, 109) != null;
};


/**
 * optional CreateAliasTransactionData create_alias = 110;
 * @return {?proto.zb.CreateAliasTransactionData}
 */
proto.zb.Transaction.prototype.getCreateAlias = function() {
  return /** @type{?proto.zb.CreateAliasTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.zb.CreateAliasTransactionData, 110));
};


/** @param {?proto.zb.CreateAliasTransactionData|undefined} value */
proto.zb.Transaction.prototype.setCreateAlias = function(value) {
  jspb.Message.setOneofWrapperField(this, 110, proto.zb.Transaction.oneofGroups_[0], value);
};


proto.zb.Transaction.prototype.clearCreateAlias = function() {
  this.setCreateAlias(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Transaction.prototype.hasCreateAlias = function() {
  return jspb.Message.getField(this, 110) != null;
};


/**
 * optional MassTransferTransactionData mass_transfer = 111;
 * @return {?proto.zb.MassTransferTransactionData}
 */
proto.zb.Transaction.prototype.getMassTransfer = function() {
  return /** @type{?proto.zb.MassTransferTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.zb.MassTransferTransactionData, 111));
};


/** @param {?proto.zb.MassTransferTransactionData|undefined} value */
proto.zb.Transaction.prototype.setMassTransfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 111, proto.zb.Transaction.oneofGroups_[0], value);
};


proto.zb.Transaction.prototype.clearMassTransfer = function() {
  this.setMassTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Transaction.prototype.hasMassTransfer = function() {
  return jspb.Message.getField(this, 111) != null;
};


/**
 * optional DataTransactionData data_transaction = 112;
 * @return {?proto.zb.DataTransactionData}
 */
proto.zb.Transaction.prototype.getDataTransaction = function() {
  return /** @type{?proto.zb.DataTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.zb.DataTransactionData, 112));
};


/** @param {?proto.zb.DataTransactionData|undefined} value */
proto.zb.Transaction.prototype.setDataTransaction = function(value) {
  jspb.Message.setOneofWrapperField(this, 112, proto.zb.Transaction.oneofGroups_[0], value);
};


proto.zb.Transaction.prototype.clearDataTransaction = function() {
  this.setDataTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Transaction.prototype.hasDataTransaction = function() {
  return jspb.Message.getField(this, 112) != null;
};


/**
 * optional SetScriptTransactionData set_script = 113;
 * @return {?proto.zb.SetScriptTransactionData}
 */
proto.zb.Transaction.prototype.getSetScript = function() {
  return /** @type{?proto.zb.SetScriptTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.zb.SetScriptTransactionData, 113));
};


/** @param {?proto.zb.SetScriptTransactionData|undefined} value */
proto.zb.Transaction.prototype.setSetScript = function(value) {
  jspb.Message.setOneofWrapperField(this, 113, proto.zb.Transaction.oneofGroups_[0], value);
};


proto.zb.Transaction.prototype.clearSetScript = function() {
  this.setSetScript(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Transaction.prototype.hasSetScript = function() {
  return jspb.Message.getField(this, 113) != null;
};


/**
 * optional SponsorFeeTransactionData sponsor_fee = 114;
 * @return {?proto.zb.SponsorFeeTransactionData}
 */
proto.zb.Transaction.prototype.getSponsorFee = function() {
  return /** @type{?proto.zb.SponsorFeeTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.zb.SponsorFeeTransactionData, 114));
};


/** @param {?proto.zb.SponsorFeeTransactionData|undefined} value */
proto.zb.Transaction.prototype.setSponsorFee = function(value) {
  jspb.Message.setOneofWrapperField(this, 114, proto.zb.Transaction.oneofGroups_[0], value);
};


proto.zb.Transaction.prototype.clearSponsorFee = function() {
  this.setSponsorFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Transaction.prototype.hasSponsorFee = function() {
  return jspb.Message.getField(this, 114) != null;
};


/**
 * optional SetAssetScriptTransactionData set_asset_script = 115;
 * @return {?proto.zb.SetAssetScriptTransactionData}
 */
proto.zb.Transaction.prototype.getSetAssetScript = function() {
  return /** @type{?proto.zb.SetAssetScriptTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.zb.SetAssetScriptTransactionData, 115));
};


/** @param {?proto.zb.SetAssetScriptTransactionData|undefined} value */
proto.zb.Transaction.prototype.setSetAssetScript = function(value) {
  jspb.Message.setOneofWrapperField(this, 115, proto.zb.Transaction.oneofGroups_[0], value);
};


proto.zb.Transaction.prototype.clearSetAssetScript = function() {
  this.setSetAssetScript(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Transaction.prototype.hasSetAssetScript = function() {
  return jspb.Message.getField(this, 115) != null;
};


/**
 * optional InvokeScriptTransactionData invoke_script = 116;
 * @return {?proto.zb.InvokeScriptTransactionData}
 */
proto.zb.Transaction.prototype.getInvokeScript = function() {
  return /** @type{?proto.zb.InvokeScriptTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.zb.InvokeScriptTransactionData, 116));
};


/** @param {?proto.zb.InvokeScriptTransactionData|undefined} value */
proto.zb.Transaction.prototype.setInvokeScript = function(value) {
  jspb.Message.setOneofWrapperField(this, 116, proto.zb.Transaction.oneofGroups_[0], value);
};


proto.zb.Transaction.prototype.clearInvokeScript = function() {
  this.setInvokeScript(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Transaction.prototype.hasInvokeScript = function() {
  return jspb.Message.getField(this, 116) != null;
};


/**
 * optional UpdateAssetInfoTransactionData update_asset_info = 117;
 * @return {?proto.zb.UpdateAssetInfoTransactionData}
 */
proto.zb.Transaction.prototype.getUpdateAssetInfo = function() {
  return /** @type{?proto.zb.UpdateAssetInfoTransactionData} */ (
    jspb.Message.getWrapperField(this, proto.zb.UpdateAssetInfoTransactionData, 117));
};


/** @param {?proto.zb.UpdateAssetInfoTransactionData|undefined} value */
proto.zb.Transaction.prototype.setUpdateAssetInfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 117, proto.zb.Transaction.oneofGroups_[0], value);
};


proto.zb.Transaction.prototype.clearUpdateAssetInfo = function() {
  this.setUpdateAssetInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Transaction.prototype.hasUpdateAssetInfo = function() {
  return jspb.Message.getField(this, 117) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.GenesisTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.GenesisTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.GenesisTransactionData.displayName = 'proto.zb.GenesisTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.GenesisTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.GenesisTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.GenesisTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.GenesisTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipientAddress: msg.getRecipientAddress_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.GenesisTransactionData}
 */
proto.zb.GenesisTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.GenesisTransactionData;
  return proto.zb.GenesisTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.GenesisTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.GenesisTransactionData}
 */
proto.zb.GenesisTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecipientAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.GenesisTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.GenesisTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.GenesisTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.GenesisTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipientAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes recipient_address = 1;
 * @return {string}
 */
proto.zb.GenesisTransactionData.prototype.getRecipientAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes recipient_address = 1;
 * This is a type-conversion wrapper around `getRecipientAddress()`
 * @return {string}
 */
proto.zb.GenesisTransactionData.prototype.getRecipientAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecipientAddress()));
};


/**
 * optional bytes recipient_address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecipientAddress()`
 * @return {!Uint8Array}
 */
proto.zb.GenesisTransactionData.prototype.getRecipientAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecipientAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.GenesisTransactionData.prototype.setRecipientAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.zb.GenesisTransactionData.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.zb.GenesisTransactionData.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.PaymentTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.PaymentTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.PaymentTransactionData.displayName = 'proto.zb.PaymentTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.PaymentTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.PaymentTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.PaymentTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.PaymentTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipientAddress: msg.getRecipientAddress_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.PaymentTransactionData}
 */
proto.zb.PaymentTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.PaymentTransactionData;
  return proto.zb.PaymentTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.PaymentTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.PaymentTransactionData}
 */
proto.zb.PaymentTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecipientAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.PaymentTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.PaymentTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.PaymentTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.PaymentTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipientAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes recipient_address = 1;
 * @return {string}
 */
proto.zb.PaymentTransactionData.prototype.getRecipientAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes recipient_address = 1;
 * This is a type-conversion wrapper around `getRecipientAddress()`
 * @return {string}
 */
proto.zb.PaymentTransactionData.prototype.getRecipientAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecipientAddress()));
};


/**
 * optional bytes recipient_address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecipientAddress()`
 * @return {!Uint8Array}
 */
proto.zb.PaymentTransactionData.prototype.getRecipientAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecipientAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.PaymentTransactionData.prototype.setRecipientAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.zb.PaymentTransactionData.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.zb.PaymentTransactionData.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.TransferTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.TransferTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.TransferTransactionData.displayName = 'proto.zb.TransferTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.TransferTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.TransferTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.TransferTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.TransferTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipient: (f = msg.getRecipient()) && recipient_pb.Recipient.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && amount_pb.Amount.toObject(includeInstance, f),
    attachment: msg.getAttachment_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.TransferTransactionData}
 */
proto.zb.TransferTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.TransferTransactionData;
  return proto.zb.TransferTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.TransferTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.TransferTransactionData}
 */
proto.zb.TransferTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new recipient_pb.Recipient;
      reader.readMessage(value,recipient_pb.Recipient.deserializeBinaryFromReader);
      msg.setRecipient(value);
      break;
    case 2:
      var value = new amount_pb.Amount;
      reader.readMessage(value,amount_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.TransferTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.TransferTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.TransferTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.TransferTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipient();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      recipient_pb.Recipient.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      amount_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getAttachment_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional Recipient recipient = 1;
 * @return {?proto.zb.Recipient}
 */
proto.zb.TransferTransactionData.prototype.getRecipient = function() {
  return /** @type{?proto.zb.Recipient} */ (
    jspb.Message.getWrapperField(this, recipient_pb.Recipient, 1));
};


/** @param {?proto.zb.Recipient|undefined} value */
proto.zb.TransferTransactionData.prototype.setRecipient = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zb.TransferTransactionData.prototype.clearRecipient = function() {
  this.setRecipient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.TransferTransactionData.prototype.hasRecipient = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Amount amount = 2;
 * @return {?proto.zb.Amount}
 */
proto.zb.TransferTransactionData.prototype.getAmount = function() {
  return /** @type{?proto.zb.Amount} */ (
    jspb.Message.getWrapperField(this, amount_pb.Amount, 2));
};


/** @param {?proto.zb.Amount|undefined} value */
proto.zb.TransferTransactionData.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.zb.TransferTransactionData.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.TransferTransactionData.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes attachment = 3;
 * @return {string}
 */
proto.zb.TransferTransactionData.prototype.getAttachment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes attachment = 3;
 * This is a type-conversion wrapper around `getAttachment()`
 * @return {string}
 */
proto.zb.TransferTransactionData.prototype.getAttachment_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachment()));
};


/**
 * optional bytes attachment = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachment()`
 * @return {!Uint8Array}
 */
proto.zb.TransferTransactionData.prototype.getAttachment_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachment()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.TransferTransactionData.prototype.setAttachment = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.CreateAliasTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.CreateAliasTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.CreateAliasTransactionData.displayName = 'proto.zb.CreateAliasTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.CreateAliasTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.CreateAliasTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.CreateAliasTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.CreateAliasTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    alias: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.CreateAliasTransactionData}
 */
proto.zb.CreateAliasTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.CreateAliasTransactionData;
  return proto.zb.CreateAliasTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.CreateAliasTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.CreateAliasTransactionData}
 */
proto.zb.CreateAliasTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.CreateAliasTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.CreateAliasTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.CreateAliasTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.CreateAliasTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string alias = 1;
 * @return {string}
 */
proto.zb.CreateAliasTransactionData.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.zb.CreateAliasTransactionData.prototype.setAlias = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.DataTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zb.DataTransactionData.repeatedFields_, null);
};
goog.inherits(proto.zb.DataTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.DataTransactionData.displayName = 'proto.zb.DataTransactionData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zb.DataTransactionData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.DataTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.DataTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.DataTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.DataTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.zb.DataTransactionData.DataEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.DataTransactionData}
 */
proto.zb.DataTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.DataTransactionData;
  return proto.zb.DataTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.DataTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.DataTransactionData}
 */
proto.zb.DataTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.zb.DataTransactionData.DataEntry;
      reader.readMessage(value,proto.zb.DataTransactionData.DataEntry.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.DataTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.DataTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.DataTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.DataTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.zb.DataTransactionData.DataEntry.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.DataTransactionData.DataEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.zb.DataTransactionData.DataEntry.oneofGroups_);
};
goog.inherits(proto.zb.DataTransactionData.DataEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.DataTransactionData.DataEntry.displayName = 'proto.zb.DataTransactionData.DataEntry';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.zb.DataTransactionData.DataEntry.oneofGroups_ = [[10,11,12,13]];

/**
 * @enum {number}
 */
proto.zb.DataTransactionData.DataEntry.ValueCase = {
  VALUE_NOT_SET: 0,
  INT_VALUE: 10,
  BOOL_VALUE: 11,
  BINARY_VALUE: 12,
  STRING_VALUE: 13
};

/**
 * @return {proto.zb.DataTransactionData.DataEntry.ValueCase}
 */
proto.zb.DataTransactionData.DataEntry.prototype.getValueCase = function() {
  return /** @type {proto.zb.DataTransactionData.DataEntry.ValueCase} */(jspb.Message.computeOneofCase(this, proto.zb.DataTransactionData.DataEntry.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.DataTransactionData.DataEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.DataTransactionData.DataEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.DataTransactionData.DataEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.DataTransactionData.DataEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    intValue: jspb.Message.getFieldWithDefault(msg, 10, 0),
    boolValue: jspb.Message.getFieldWithDefault(msg, 11, false),
    binaryValue: msg.getBinaryValue_asB64(),
    stringValue: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.DataTransactionData.DataEntry}
 */
proto.zb.DataTransactionData.DataEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.DataTransactionData.DataEntry;
  return proto.zb.DataTransactionData.DataEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.DataTransactionData.DataEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.DataTransactionData.DataEntry}
 */
proto.zb.DataTransactionData.DataEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntValue(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBinaryValue(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.DataTransactionData.DataEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.DataTransactionData.DataEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.DataTransactionData.DataEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.DataTransactionData.DataEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.zb.DataTransactionData.DataEntry.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.zb.DataTransactionData.DataEntry.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 int_value = 10;
 * @return {number}
 */
proto.zb.DataTransactionData.DataEntry.prototype.getIntValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.zb.DataTransactionData.DataEntry.prototype.setIntValue = function(value) {
  jspb.Message.setOneofField(this, 10, proto.zb.DataTransactionData.DataEntry.oneofGroups_[0], value);
};


proto.zb.DataTransactionData.DataEntry.prototype.clearIntValue = function() {
  jspb.Message.setOneofField(this, 10, proto.zb.DataTransactionData.DataEntry.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.DataTransactionData.DataEntry.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool bool_value = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.zb.DataTransactionData.DataEntry.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.zb.DataTransactionData.DataEntry.prototype.setBoolValue = function(value) {
  jspb.Message.setOneofField(this, 11, proto.zb.DataTransactionData.DataEntry.oneofGroups_[0], value);
};


proto.zb.DataTransactionData.DataEntry.prototype.clearBoolValue = function() {
  jspb.Message.setOneofField(this, 11, proto.zb.DataTransactionData.DataEntry.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.DataTransactionData.DataEntry.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bytes binary_value = 12;
 * @return {string}
 */
proto.zb.DataTransactionData.DataEntry.prototype.getBinaryValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes binary_value = 12;
 * This is a type-conversion wrapper around `getBinaryValue()`
 * @return {string}
 */
proto.zb.DataTransactionData.DataEntry.prototype.getBinaryValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBinaryValue()));
};


/**
 * optional bytes binary_value = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBinaryValue()`
 * @return {!Uint8Array}
 */
proto.zb.DataTransactionData.DataEntry.prototype.getBinaryValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBinaryValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.DataTransactionData.DataEntry.prototype.setBinaryValue = function(value) {
  jspb.Message.setOneofField(this, 12, proto.zb.DataTransactionData.DataEntry.oneofGroups_[0], value);
};


proto.zb.DataTransactionData.DataEntry.prototype.clearBinaryValue = function() {
  jspb.Message.setOneofField(this, 12, proto.zb.DataTransactionData.DataEntry.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.DataTransactionData.DataEntry.prototype.hasBinaryValue = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string string_value = 13;
 * @return {string}
 */
proto.zb.DataTransactionData.DataEntry.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.zb.DataTransactionData.DataEntry.prototype.setStringValue = function(value) {
  jspb.Message.setOneofField(this, 13, proto.zb.DataTransactionData.DataEntry.oneofGroups_[0], value);
};


proto.zb.DataTransactionData.DataEntry.prototype.clearStringValue = function() {
  jspb.Message.setOneofField(this, 13, proto.zb.DataTransactionData.DataEntry.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.DataTransactionData.DataEntry.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated DataEntry data = 1;
 * @return {!Array<!proto.zb.DataTransactionData.DataEntry>}
 */
proto.zb.DataTransactionData.prototype.getDataList = function() {
  return /** @type{!Array<!proto.zb.DataTransactionData.DataEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zb.DataTransactionData.DataEntry, 1));
};


/** @param {!Array<!proto.zb.DataTransactionData.DataEntry>} value */
proto.zb.DataTransactionData.prototype.setDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.zb.DataTransactionData.DataEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zb.DataTransactionData.DataEntry}
 */
proto.zb.DataTransactionData.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.zb.DataTransactionData.DataEntry, opt_index);
};


proto.zb.DataTransactionData.prototype.clearDataList = function() {
  this.setDataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.MassTransferTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zb.MassTransferTransactionData.repeatedFields_, null);
};
goog.inherits(proto.zb.MassTransferTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.MassTransferTransactionData.displayName = 'proto.zb.MassTransferTransactionData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zb.MassTransferTransactionData.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.MassTransferTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.MassTransferTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.MassTransferTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.MassTransferTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: msg.getAssetId_asB64(),
    transfersList: jspb.Message.toObjectList(msg.getTransfersList(),
    proto.zb.MassTransferTransactionData.Transfer.toObject, includeInstance),
    attachment: msg.getAttachment_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.MassTransferTransactionData}
 */
proto.zb.MassTransferTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.MassTransferTransactionData;
  return proto.zb.MassTransferTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.MassTransferTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.MassTransferTransactionData}
 */
proto.zb.MassTransferTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetId(value);
      break;
    case 2:
      var value = new proto.zb.MassTransferTransactionData.Transfer;
      reader.readMessage(value,proto.zb.MassTransferTransactionData.Transfer.deserializeBinaryFromReader);
      msg.addTransfers(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.MassTransferTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.MassTransferTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.MassTransferTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.MassTransferTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTransfersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.zb.MassTransferTransactionData.Transfer.serializeBinaryToWriter
    );
  }
  f = message.getAttachment_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.MassTransferTransactionData.Transfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.MassTransferTransactionData.Transfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.MassTransferTransactionData.Transfer.displayName = 'proto.zb.MassTransferTransactionData.Transfer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.MassTransferTransactionData.Transfer.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.MassTransferTransactionData.Transfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.MassTransferTransactionData.Transfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.MassTransferTransactionData.Transfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipient: (f = msg.getRecipient()) && recipient_pb.Recipient.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.MassTransferTransactionData.Transfer}
 */
proto.zb.MassTransferTransactionData.Transfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.MassTransferTransactionData.Transfer;
  return proto.zb.MassTransferTransactionData.Transfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.MassTransferTransactionData.Transfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.MassTransferTransactionData.Transfer}
 */
proto.zb.MassTransferTransactionData.Transfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new recipient_pb.Recipient;
      reader.readMessage(value,recipient_pb.Recipient.deserializeBinaryFromReader);
      msg.setRecipient(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.MassTransferTransactionData.Transfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.MassTransferTransactionData.Transfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.MassTransferTransactionData.Transfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.MassTransferTransactionData.Transfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipient();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      recipient_pb.Recipient.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional Recipient recipient = 1;
 * @return {?proto.zb.Recipient}
 */
proto.zb.MassTransferTransactionData.Transfer.prototype.getRecipient = function() {
  return /** @type{?proto.zb.Recipient} */ (
    jspb.Message.getWrapperField(this, recipient_pb.Recipient, 1));
};


/** @param {?proto.zb.Recipient|undefined} value */
proto.zb.MassTransferTransactionData.Transfer.prototype.setRecipient = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zb.MassTransferTransactionData.Transfer.prototype.clearRecipient = function() {
  this.setRecipient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.MassTransferTransactionData.Transfer.prototype.hasRecipient = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.zb.MassTransferTransactionData.Transfer.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.zb.MassTransferTransactionData.Transfer.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes asset_id = 1;
 * @return {string}
 */
proto.zb.MassTransferTransactionData.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes asset_id = 1;
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {string}
 */
proto.zb.MassTransferTransactionData.prototype.getAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetId()));
};


/**
 * optional bytes asset_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {!Uint8Array}
 */
proto.zb.MassTransferTransactionData.prototype.getAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.MassTransferTransactionData.prototype.setAssetId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated Transfer transfers = 2;
 * @return {!Array<!proto.zb.MassTransferTransactionData.Transfer>}
 */
proto.zb.MassTransferTransactionData.prototype.getTransfersList = function() {
  return /** @type{!Array<!proto.zb.MassTransferTransactionData.Transfer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zb.MassTransferTransactionData.Transfer, 2));
};


/** @param {!Array<!proto.zb.MassTransferTransactionData.Transfer>} value */
proto.zb.MassTransferTransactionData.prototype.setTransfersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.zb.MassTransferTransactionData.Transfer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zb.MassTransferTransactionData.Transfer}
 */
proto.zb.MassTransferTransactionData.prototype.addTransfers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.zb.MassTransferTransactionData.Transfer, opt_index);
};


proto.zb.MassTransferTransactionData.prototype.clearTransfersList = function() {
  this.setTransfersList([]);
};


/**
 * optional bytes attachment = 3;
 * @return {string}
 */
proto.zb.MassTransferTransactionData.prototype.getAttachment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes attachment = 3;
 * This is a type-conversion wrapper around `getAttachment()`
 * @return {string}
 */
proto.zb.MassTransferTransactionData.prototype.getAttachment_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachment()));
};


/**
 * optional bytes attachment = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachment()`
 * @return {!Uint8Array}
 */
proto.zb.MassTransferTransactionData.prototype.getAttachment_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachment()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.MassTransferTransactionData.prototype.setAttachment = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.LeaseTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.LeaseTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.LeaseTransactionData.displayName = 'proto.zb.LeaseTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.LeaseTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.LeaseTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.LeaseTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.LeaseTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipient: (f = msg.getRecipient()) && recipient_pb.Recipient.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.LeaseTransactionData}
 */
proto.zb.LeaseTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.LeaseTransactionData;
  return proto.zb.LeaseTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.LeaseTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.LeaseTransactionData}
 */
proto.zb.LeaseTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new recipient_pb.Recipient;
      reader.readMessage(value,recipient_pb.Recipient.deserializeBinaryFromReader);
      msg.setRecipient(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.LeaseTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.LeaseTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.LeaseTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.LeaseTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipient();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      recipient_pb.Recipient.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional Recipient recipient = 1;
 * @return {?proto.zb.Recipient}
 */
proto.zb.LeaseTransactionData.prototype.getRecipient = function() {
  return /** @type{?proto.zb.Recipient} */ (
    jspb.Message.getWrapperField(this, recipient_pb.Recipient, 1));
};


/** @param {?proto.zb.Recipient|undefined} value */
proto.zb.LeaseTransactionData.prototype.setRecipient = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zb.LeaseTransactionData.prototype.clearRecipient = function() {
  this.setRecipient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.LeaseTransactionData.prototype.hasRecipient = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.zb.LeaseTransactionData.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.zb.LeaseTransactionData.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.LeaseCancelTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.LeaseCancelTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.LeaseCancelTransactionData.displayName = 'proto.zb.LeaseCancelTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.LeaseCancelTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.LeaseCancelTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.LeaseCancelTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.LeaseCancelTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    leaseId: msg.getLeaseId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.LeaseCancelTransactionData}
 */
proto.zb.LeaseCancelTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.LeaseCancelTransactionData;
  return proto.zb.LeaseCancelTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.LeaseCancelTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.LeaseCancelTransactionData}
 */
proto.zb.LeaseCancelTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLeaseId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.LeaseCancelTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.LeaseCancelTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.LeaseCancelTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.LeaseCancelTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeaseId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes lease_id = 1;
 * @return {string}
 */
proto.zb.LeaseCancelTransactionData.prototype.getLeaseId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes lease_id = 1;
 * This is a type-conversion wrapper around `getLeaseId()`
 * @return {string}
 */
proto.zb.LeaseCancelTransactionData.prototype.getLeaseId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLeaseId()));
};


/**
 * optional bytes lease_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLeaseId()`
 * @return {!Uint8Array}
 */
proto.zb.LeaseCancelTransactionData.prototype.getLeaseId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLeaseId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.LeaseCancelTransactionData.prototype.setLeaseId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.BurnTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.BurnTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.BurnTransactionData.displayName = 'proto.zb.BurnTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.BurnTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.BurnTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.BurnTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.BurnTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetAmount: (f = msg.getAssetAmount()) && amount_pb.Amount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.BurnTransactionData}
 */
proto.zb.BurnTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.BurnTransactionData;
  return proto.zb.BurnTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.BurnTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.BurnTransactionData}
 */
proto.zb.BurnTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new amount_pb.Amount;
      reader.readMessage(value,amount_pb.Amount.deserializeBinaryFromReader);
      msg.setAssetAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.BurnTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.BurnTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.BurnTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.BurnTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      amount_pb.Amount.serializeBinaryToWriter
    );
  }
};


/**
 * optional Amount asset_amount = 1;
 * @return {?proto.zb.Amount}
 */
proto.zb.BurnTransactionData.prototype.getAssetAmount = function() {
  return /** @type{?proto.zb.Amount} */ (
    jspb.Message.getWrapperField(this, amount_pb.Amount, 1));
};


/** @param {?proto.zb.Amount|undefined} value */
proto.zb.BurnTransactionData.prototype.setAssetAmount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zb.BurnTransactionData.prototype.clearAssetAmount = function() {
  this.setAssetAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.BurnTransactionData.prototype.hasAssetAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.IssueTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.IssueTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.IssueTransactionData.displayName = 'proto.zb.IssueTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.IssueTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.IssueTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.IssueTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.IssueTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    decimals: jspb.Message.getFieldWithDefault(msg, 4, 0),
    reissuable: jspb.Message.getFieldWithDefault(msg, 5, false),
    script: msg.getScript_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.IssueTransactionData}
 */
proto.zb.IssueTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.IssueTransactionData;
  return proto.zb.IssueTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.IssueTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.IssueTransactionData}
 */
proto.zb.IssueTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDecimals(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReissuable(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.IssueTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.IssueTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.IssueTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.IssueTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getReissuable();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.zb.IssueTransactionData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.zb.IssueTransactionData.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.zb.IssueTransactionData.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.zb.IssueTransactionData.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 amount = 3;
 * @return {number}
 */
proto.zb.IssueTransactionData.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.zb.IssueTransactionData.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 decimals = 4;
 * @return {number}
 */
proto.zb.IssueTransactionData.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.zb.IssueTransactionData.prototype.setDecimals = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool reissuable = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.zb.IssueTransactionData.prototype.getReissuable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.zb.IssueTransactionData.prototype.setReissuable = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bytes script = 6;
 * @return {string}
 */
proto.zb.IssueTransactionData.prototype.getScript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes script = 6;
 * This is a type-conversion wrapper around `getScript()`
 * @return {string}
 */
proto.zb.IssueTransactionData.prototype.getScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScript()));
};


/**
 * optional bytes script = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScript()`
 * @return {!Uint8Array}
 */
proto.zb.IssueTransactionData.prototype.getScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScript()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.IssueTransactionData.prototype.setScript = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.ReissueTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.ReissueTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.ReissueTransactionData.displayName = 'proto.zb.ReissueTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.ReissueTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.ReissueTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.ReissueTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.ReissueTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetAmount: (f = msg.getAssetAmount()) && amount_pb.Amount.toObject(includeInstance, f),
    reissuable: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.ReissueTransactionData}
 */
proto.zb.ReissueTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.ReissueTransactionData;
  return proto.zb.ReissueTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.ReissueTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.ReissueTransactionData}
 */
proto.zb.ReissueTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new amount_pb.Amount;
      reader.readMessage(value,amount_pb.Amount.deserializeBinaryFromReader);
      msg.setAssetAmount(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReissuable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.ReissueTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.ReissueTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.ReissueTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.ReissueTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      amount_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getReissuable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional Amount asset_amount = 1;
 * @return {?proto.zb.Amount}
 */
proto.zb.ReissueTransactionData.prototype.getAssetAmount = function() {
  return /** @type{?proto.zb.Amount} */ (
    jspb.Message.getWrapperField(this, amount_pb.Amount, 1));
};


/** @param {?proto.zb.Amount|undefined} value */
proto.zb.ReissueTransactionData.prototype.setAssetAmount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zb.ReissueTransactionData.prototype.clearAssetAmount = function() {
  this.setAssetAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.ReissueTransactionData.prototype.hasAssetAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool reissuable = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.zb.ReissueTransactionData.prototype.getReissuable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.zb.ReissueTransactionData.prototype.setReissuable = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.SetAssetScriptTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.SetAssetScriptTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.SetAssetScriptTransactionData.displayName = 'proto.zb.SetAssetScriptTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.SetAssetScriptTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.SetAssetScriptTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.SetAssetScriptTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.SetAssetScriptTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: msg.getAssetId_asB64(),
    script: msg.getScript_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.SetAssetScriptTransactionData}
 */
proto.zb.SetAssetScriptTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.SetAssetScriptTransactionData;
  return proto.zb.SetAssetScriptTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.SetAssetScriptTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.SetAssetScriptTransactionData}
 */
proto.zb.SetAssetScriptTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.SetAssetScriptTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.SetAssetScriptTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.SetAssetScriptTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.SetAssetScriptTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes asset_id = 1;
 * @return {string}
 */
proto.zb.SetAssetScriptTransactionData.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes asset_id = 1;
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {string}
 */
proto.zb.SetAssetScriptTransactionData.prototype.getAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetId()));
};


/**
 * optional bytes asset_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {!Uint8Array}
 */
proto.zb.SetAssetScriptTransactionData.prototype.getAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.SetAssetScriptTransactionData.prototype.setAssetId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes script = 2;
 * @return {string}
 */
proto.zb.SetAssetScriptTransactionData.prototype.getScript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes script = 2;
 * This is a type-conversion wrapper around `getScript()`
 * @return {string}
 */
proto.zb.SetAssetScriptTransactionData.prototype.getScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScript()));
};


/**
 * optional bytes script = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScript()`
 * @return {!Uint8Array}
 */
proto.zb.SetAssetScriptTransactionData.prototype.getScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScript()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.SetAssetScriptTransactionData.prototype.setScript = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.SetScriptTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.SetScriptTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.SetScriptTransactionData.displayName = 'proto.zb.SetScriptTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.SetScriptTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.SetScriptTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.SetScriptTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.SetScriptTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    script: msg.getScript_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.SetScriptTransactionData}
 */
proto.zb.SetScriptTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.SetScriptTransactionData;
  return proto.zb.SetScriptTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.SetScriptTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.SetScriptTransactionData}
 */
proto.zb.SetScriptTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.SetScriptTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.SetScriptTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.SetScriptTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.SetScriptTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes script = 1;
 * @return {string}
 */
proto.zb.SetScriptTransactionData.prototype.getScript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes script = 1;
 * This is a type-conversion wrapper around `getScript()`
 * @return {string}
 */
proto.zb.SetScriptTransactionData.prototype.getScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScript()));
};


/**
 * optional bytes script = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScript()`
 * @return {!Uint8Array}
 */
proto.zb.SetScriptTransactionData.prototype.getScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScript()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.SetScriptTransactionData.prototype.setScript = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.ExchangeTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zb.ExchangeTransactionData.repeatedFields_, null);
};
goog.inherits(proto.zb.ExchangeTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.ExchangeTransactionData.displayName = 'proto.zb.ExchangeTransactionData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zb.ExchangeTransactionData.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.ExchangeTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.ExchangeTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.ExchangeTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.ExchangeTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    price: jspb.Message.getFieldWithDefault(msg, 2, 0),
    buyMatcherFee: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sellMatcherFee: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    order_pb.Order.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.ExchangeTransactionData}
 */
proto.zb.ExchangeTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.ExchangeTransactionData;
  return proto.zb.ExchangeTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.ExchangeTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.ExchangeTransactionData}
 */
proto.zb.ExchangeTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPrice(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBuyMatcherFee(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSellMatcherFee(value);
      break;
    case 5:
      var value = new order_pb.Order;
      reader.readMessage(value,order_pb.Order.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.ExchangeTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.ExchangeTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.ExchangeTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.ExchangeTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getBuyMatcherFee();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSellMatcherFee();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      order_pb.Order.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 amount = 1;
 * @return {number}
 */
proto.zb.ExchangeTransactionData.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.zb.ExchangeTransactionData.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 price = 2;
 * @return {number}
 */
proto.zb.ExchangeTransactionData.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.zb.ExchangeTransactionData.prototype.setPrice = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 buy_matcher_fee = 3;
 * @return {number}
 */
proto.zb.ExchangeTransactionData.prototype.getBuyMatcherFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.zb.ExchangeTransactionData.prototype.setBuyMatcherFee = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 sell_matcher_fee = 4;
 * @return {number}
 */
proto.zb.ExchangeTransactionData.prototype.getSellMatcherFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.zb.ExchangeTransactionData.prototype.setSellMatcherFee = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated Order orders = 5;
 * @return {!Array<!proto.zb.Order>}
 */
proto.zb.ExchangeTransactionData.prototype.getOrdersList = function() {
  return /** @type{!Array<!proto.zb.Order>} */ (
    jspb.Message.getRepeatedWrapperField(this, order_pb.Order, 5));
};


/** @param {!Array<!proto.zb.Order>} value */
proto.zb.ExchangeTransactionData.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.zb.Order=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zb.Order}
 */
proto.zb.ExchangeTransactionData.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.zb.Order, opt_index);
};


proto.zb.ExchangeTransactionData.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.SponsorFeeTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.SponsorFeeTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.SponsorFeeTransactionData.displayName = 'proto.zb.SponsorFeeTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.SponsorFeeTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.SponsorFeeTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.SponsorFeeTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.SponsorFeeTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    minFee: (f = msg.getMinFee()) && amount_pb.Amount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.SponsorFeeTransactionData}
 */
proto.zb.SponsorFeeTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.SponsorFeeTransactionData;
  return proto.zb.SponsorFeeTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.SponsorFeeTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.SponsorFeeTransactionData}
 */
proto.zb.SponsorFeeTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new amount_pb.Amount;
      reader.readMessage(value,amount_pb.Amount.deserializeBinaryFromReader);
      msg.setMinFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.SponsorFeeTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.SponsorFeeTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.SponsorFeeTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.SponsorFeeTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinFee();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      amount_pb.Amount.serializeBinaryToWriter
    );
  }
};


/**
 * optional Amount min_fee = 1;
 * @return {?proto.zb.Amount}
 */
proto.zb.SponsorFeeTransactionData.prototype.getMinFee = function() {
  return /** @type{?proto.zb.Amount} */ (
    jspb.Message.getWrapperField(this, amount_pb.Amount, 1));
};


/** @param {?proto.zb.Amount|undefined} value */
proto.zb.SponsorFeeTransactionData.prototype.setMinFee = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zb.SponsorFeeTransactionData.prototype.clearMinFee = function() {
  this.setMinFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.SponsorFeeTransactionData.prototype.hasMinFee = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.InvokeScriptTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zb.InvokeScriptTransactionData.repeatedFields_, null);
};
goog.inherits(proto.zb.InvokeScriptTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.InvokeScriptTransactionData.displayName = 'proto.zb.InvokeScriptTransactionData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zb.InvokeScriptTransactionData.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.InvokeScriptTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.InvokeScriptTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.InvokeScriptTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    dApp: (f = msg.getDApp()) && recipient_pb.Recipient.toObject(includeInstance, f),
    functionCall: msg.getFunctionCall_asB64(),
    paymentsList: jspb.Message.toObjectList(msg.getPaymentsList(),
    amount_pb.Amount.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.InvokeScriptTransactionData}
 */
proto.zb.InvokeScriptTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.InvokeScriptTransactionData;
  return proto.zb.InvokeScriptTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.InvokeScriptTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.InvokeScriptTransactionData}
 */
proto.zb.InvokeScriptTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new recipient_pb.Recipient;
      reader.readMessage(value,recipient_pb.Recipient.deserializeBinaryFromReader);
      msg.setDApp(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFunctionCall(value);
      break;
    case 3:
      var value = new amount_pb.Amount;
      reader.readMessage(value,amount_pb.Amount.deserializeBinaryFromReader);
      msg.addPayments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.InvokeScriptTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.InvokeScriptTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDApp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      recipient_pb.Recipient.serializeBinaryToWriter
    );
  }
  f = message.getFunctionCall_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPaymentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      amount_pb.Amount.serializeBinaryToWriter
    );
  }
};


/**
 * optional Recipient d_app = 1;
 * @return {?proto.zb.Recipient}
 */
proto.zb.InvokeScriptTransactionData.prototype.getDApp = function() {
  return /** @type{?proto.zb.Recipient} */ (
    jspb.Message.getWrapperField(this, recipient_pb.Recipient, 1));
};


/** @param {?proto.zb.Recipient|undefined} value */
proto.zb.InvokeScriptTransactionData.prototype.setDApp = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zb.InvokeScriptTransactionData.prototype.clearDApp = function() {
  this.setDApp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.InvokeScriptTransactionData.prototype.hasDApp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes function_call = 2;
 * @return {string}
 */
proto.zb.InvokeScriptTransactionData.prototype.getFunctionCall = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes function_call = 2;
 * This is a type-conversion wrapper around `getFunctionCall()`
 * @return {string}
 */
proto.zb.InvokeScriptTransactionData.prototype.getFunctionCall_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFunctionCall()));
};


/**
 * optional bytes function_call = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFunctionCall()`
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptTransactionData.prototype.getFunctionCall_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFunctionCall()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.InvokeScriptTransactionData.prototype.setFunctionCall = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated Amount payments = 3;
 * @return {!Array<!proto.zb.Amount>}
 */
proto.zb.InvokeScriptTransactionData.prototype.getPaymentsList = function() {
  return /** @type{!Array<!proto.zb.Amount>} */ (
    jspb.Message.getRepeatedWrapperField(this, amount_pb.Amount, 3));
};


/** @param {!Array<!proto.zb.Amount>} value */
proto.zb.InvokeScriptTransactionData.prototype.setPaymentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.zb.Amount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zb.Amount}
 */
proto.zb.InvokeScriptTransactionData.prototype.addPayments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.zb.Amount, opt_index);
};


proto.zb.InvokeScriptTransactionData.prototype.clearPaymentsList = function() {
  this.setPaymentsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.UpdateAssetInfoTransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.UpdateAssetInfoTransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.UpdateAssetInfoTransactionData.displayName = 'proto.zb.UpdateAssetInfoTransactionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.UpdateAssetInfoTransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.UpdateAssetInfoTransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.UpdateAssetInfoTransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.UpdateAssetInfoTransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: msg.getAssetId_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.UpdateAssetInfoTransactionData}
 */
proto.zb.UpdateAssetInfoTransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.UpdateAssetInfoTransactionData;
  return proto.zb.UpdateAssetInfoTransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.UpdateAssetInfoTransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.UpdateAssetInfoTransactionData}
 */
proto.zb.UpdateAssetInfoTransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.UpdateAssetInfoTransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.UpdateAssetInfoTransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.UpdateAssetInfoTransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.UpdateAssetInfoTransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bytes asset_id = 1;
 * @return {string}
 */
proto.zb.UpdateAssetInfoTransactionData.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes asset_id = 1;
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {string}
 */
proto.zb.UpdateAssetInfoTransactionData.prototype.getAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetId()));
};


/**
 * optional bytes asset_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {!Uint8Array}
 */
proto.zb.UpdateAssetInfoTransactionData.prototype.getAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.UpdateAssetInfoTransactionData.prototype.setAssetId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.zb.UpdateAssetInfoTransactionData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.zb.UpdateAssetInfoTransactionData.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.zb.UpdateAssetInfoTransactionData.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.zb.UpdateAssetInfoTransactionData.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.zb);
