/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var transaction_pb = require('./transaction_pb.js');
var amount_pb = require('./amount_pb.js');
var recipient_pb = require('./recipient_pb.js');
goog.exportSymbol('proto.zb.InvokeScriptResult', null, global);
goog.exportSymbol('proto.zb.InvokeScriptResult.Burn', null, global);
goog.exportSymbol('proto.zb.InvokeScriptResult.Call', null, global);
goog.exportSymbol('proto.zb.InvokeScriptResult.ErrorMessage', null, global);
goog.exportSymbol('proto.zb.InvokeScriptResult.Invocation', null, global);
goog.exportSymbol('proto.zb.InvokeScriptResult.Issue', null, global);
goog.exportSymbol('proto.zb.InvokeScriptResult.Lease', null, global);
goog.exportSymbol('proto.zb.InvokeScriptResult.LeaseCancel', null, global);
goog.exportSymbol('proto.zb.InvokeScriptResult.Payment', null, global);
goog.exportSymbol('proto.zb.InvokeScriptResult.Reissue', null, global);
goog.exportSymbol('proto.zb.InvokeScriptResult.SponsorFee', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.InvokeScriptResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zb.InvokeScriptResult.repeatedFields_, null);
};
goog.inherits(proto.zb.InvokeScriptResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.InvokeScriptResult.displayName = 'proto.zb.InvokeScriptResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zb.InvokeScriptResult.repeatedFields_ = [1,2,3,4,5,7,8,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.InvokeScriptResult.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.InvokeScriptResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.InvokeScriptResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    transaction_pb.DataTransactionData.DataEntry.toObject, includeInstance),
    transfersList: jspb.Message.toObjectList(msg.getTransfersList(),
    proto.zb.InvokeScriptResult.Payment.toObject, includeInstance),
    issuesList: jspb.Message.toObjectList(msg.getIssuesList(),
    proto.zb.InvokeScriptResult.Issue.toObject, includeInstance),
    reissuesList: jspb.Message.toObjectList(msg.getReissuesList(),
    proto.zb.InvokeScriptResult.Reissue.toObject, includeInstance),
    burnsList: jspb.Message.toObjectList(msg.getBurnsList(),
    proto.zb.InvokeScriptResult.Burn.toObject, includeInstance),
    errorMessage: (f = msg.getErrorMessage()) && proto.zb.InvokeScriptResult.ErrorMessage.toObject(includeInstance, f),
    sponsorFeesList: jspb.Message.toObjectList(msg.getSponsorFeesList(),
    proto.zb.InvokeScriptResult.SponsorFee.toObject, includeInstance),
    leasesList: jspb.Message.toObjectList(msg.getLeasesList(),
    proto.zb.InvokeScriptResult.Lease.toObject, includeInstance),
    leaseCancelsList: jspb.Message.toObjectList(msg.getLeaseCancelsList(),
    proto.zb.InvokeScriptResult.LeaseCancel.toObject, includeInstance),
    invokesList: jspb.Message.toObjectList(msg.getInvokesList(),
    proto.zb.InvokeScriptResult.Invocation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.InvokeScriptResult}
 */
proto.zb.InvokeScriptResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.InvokeScriptResult;
  return proto.zb.InvokeScriptResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.InvokeScriptResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.InvokeScriptResult}
 */
proto.zb.InvokeScriptResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new transaction_pb.DataTransactionData.DataEntry;
      reader.readMessage(value,transaction_pb.DataTransactionData.DataEntry.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 2:
      var value = new proto.zb.InvokeScriptResult.Payment;
      reader.readMessage(value,proto.zb.InvokeScriptResult.Payment.deserializeBinaryFromReader);
      msg.addTransfers(value);
      break;
    case 3:
      var value = new proto.zb.InvokeScriptResult.Issue;
      reader.readMessage(value,proto.zb.InvokeScriptResult.Issue.deserializeBinaryFromReader);
      msg.addIssues(value);
      break;
    case 4:
      var value = new proto.zb.InvokeScriptResult.Reissue;
      reader.readMessage(value,proto.zb.InvokeScriptResult.Reissue.deserializeBinaryFromReader);
      msg.addReissues(value);
      break;
    case 5:
      var value = new proto.zb.InvokeScriptResult.Burn;
      reader.readMessage(value,proto.zb.InvokeScriptResult.Burn.deserializeBinaryFromReader);
      msg.addBurns(value);
      break;
    case 6:
      var value = new proto.zb.InvokeScriptResult.ErrorMessage;
      reader.readMessage(value,proto.zb.InvokeScriptResult.ErrorMessage.deserializeBinaryFromReader);
      msg.setErrorMessage(value);
      break;
    case 7:
      var value = new proto.zb.InvokeScriptResult.SponsorFee;
      reader.readMessage(value,proto.zb.InvokeScriptResult.SponsorFee.deserializeBinaryFromReader);
      msg.addSponsorFees(value);
      break;
    case 8:
      var value = new proto.zb.InvokeScriptResult.Lease;
      reader.readMessage(value,proto.zb.InvokeScriptResult.Lease.deserializeBinaryFromReader);
      msg.addLeases(value);
      break;
    case 9:
      var value = new proto.zb.InvokeScriptResult.LeaseCancel;
      reader.readMessage(value,proto.zb.InvokeScriptResult.LeaseCancel.deserializeBinaryFromReader);
      msg.addLeaseCancels(value);
      break;
    case 10:
      var value = new proto.zb.InvokeScriptResult.Invocation;
      reader.readMessage(value,proto.zb.InvokeScriptResult.Invocation.deserializeBinaryFromReader);
      msg.addInvokes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.InvokeScriptResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.InvokeScriptResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      transaction_pb.DataTransactionData.DataEntry.serializeBinaryToWriter
    );
  }
  f = message.getTransfersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.zb.InvokeScriptResult.Payment.serializeBinaryToWriter
    );
  }
  f = message.getIssuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.zb.InvokeScriptResult.Issue.serializeBinaryToWriter
    );
  }
  f = message.getReissuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.zb.InvokeScriptResult.Reissue.serializeBinaryToWriter
    );
  }
  f = message.getBurnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.zb.InvokeScriptResult.Burn.serializeBinaryToWriter
    );
  }
  f = message.getErrorMessage();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.zb.InvokeScriptResult.ErrorMessage.serializeBinaryToWriter
    );
  }
  f = message.getSponsorFeesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.zb.InvokeScriptResult.SponsorFee.serializeBinaryToWriter
    );
  }
  f = message.getLeasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.zb.InvokeScriptResult.Lease.serializeBinaryToWriter
    );
  }
  f = message.getLeaseCancelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.zb.InvokeScriptResult.LeaseCancel.serializeBinaryToWriter
    );
  }
  f = message.getInvokesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.zb.InvokeScriptResult.Invocation.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.InvokeScriptResult.Payment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.InvokeScriptResult.Payment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.InvokeScriptResult.Payment.displayName = 'proto.zb.InvokeScriptResult.Payment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.InvokeScriptResult.Payment.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.InvokeScriptResult.Payment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.InvokeScriptResult.Payment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.Payment.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    amount: (f = msg.getAmount()) && amount_pb.Amount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.InvokeScriptResult.Payment}
 */
proto.zb.InvokeScriptResult.Payment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.InvokeScriptResult.Payment;
  return proto.zb.InvokeScriptResult.Payment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.InvokeScriptResult.Payment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.InvokeScriptResult.Payment}
 */
proto.zb.InvokeScriptResult.Payment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = new amount_pb.Amount;
      reader.readMessage(value,amount_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.Payment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.InvokeScriptResult.Payment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.InvokeScriptResult.Payment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.Payment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      amount_pb.Amount.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {string}
 */
proto.zb.InvokeScriptResult.Payment.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.zb.InvokeScriptResult.Payment.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.Payment.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.InvokeScriptResult.Payment.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Amount amount = 2;
 * @return {?proto.zb.Amount}
 */
proto.zb.InvokeScriptResult.Payment.prototype.getAmount = function() {
  return /** @type{?proto.zb.Amount} */ (
    jspb.Message.getWrapperField(this, amount_pb.Amount, 2));
};


/** @param {?proto.zb.Amount|undefined} value */
proto.zb.InvokeScriptResult.Payment.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.zb.InvokeScriptResult.Payment.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.InvokeScriptResult.Payment.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.InvokeScriptResult.Issue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.InvokeScriptResult.Issue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.InvokeScriptResult.Issue.displayName = 'proto.zb.InvokeScriptResult.Issue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.InvokeScriptResult.Issue.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.InvokeScriptResult.Issue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.InvokeScriptResult.Issue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.Issue.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: msg.getAssetId_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    decimals: jspb.Message.getFieldWithDefault(msg, 5, 0),
    reissuable: jspb.Message.getFieldWithDefault(msg, 6, false),
    script: msg.getScript_asB64(),
    nonce: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.InvokeScriptResult.Issue}
 */
proto.zb.InvokeScriptResult.Issue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.InvokeScriptResult.Issue;
  return proto.zb.InvokeScriptResult.Issue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.InvokeScriptResult.Issue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.InvokeScriptResult.Issue}
 */
proto.zb.InvokeScriptResult.Issue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDecimals(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReissuable(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScript(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.Issue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.InvokeScriptResult.Issue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.InvokeScriptResult.Issue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.Issue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getReissuable();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
};


/**
 * optional bytes asset_id = 1;
 * @return {string}
 */
proto.zb.InvokeScriptResult.Issue.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes asset_id = 1;
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {string}
 */
proto.zb.InvokeScriptResult.Issue.prototype.getAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetId()));
};


/**
 * optional bytes asset_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.Issue.prototype.getAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.InvokeScriptResult.Issue.prototype.setAssetId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.zb.InvokeScriptResult.Issue.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.zb.InvokeScriptResult.Issue.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.zb.InvokeScriptResult.Issue.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.zb.InvokeScriptResult.Issue.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 amount = 4;
 * @return {number}
 */
proto.zb.InvokeScriptResult.Issue.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.zb.InvokeScriptResult.Issue.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 decimals = 5;
 * @return {number}
 */
proto.zb.InvokeScriptResult.Issue.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.zb.InvokeScriptResult.Issue.prototype.setDecimals = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool reissuable = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.zb.InvokeScriptResult.Issue.prototype.getReissuable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.zb.InvokeScriptResult.Issue.prototype.setReissuable = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bytes script = 7;
 * @return {string}
 */
proto.zb.InvokeScriptResult.Issue.prototype.getScript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes script = 7;
 * This is a type-conversion wrapper around `getScript()`
 * @return {string}
 */
proto.zb.InvokeScriptResult.Issue.prototype.getScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScript()));
};


/**
 * optional bytes script = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScript()`
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.Issue.prototype.getScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScript()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.InvokeScriptResult.Issue.prototype.setScript = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional int64 nonce = 8;
 * @return {number}
 */
proto.zb.InvokeScriptResult.Issue.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.zb.InvokeScriptResult.Issue.prototype.setNonce = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.InvokeScriptResult.Reissue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.InvokeScriptResult.Reissue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.InvokeScriptResult.Reissue.displayName = 'proto.zb.InvokeScriptResult.Reissue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.InvokeScriptResult.Reissue.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.InvokeScriptResult.Reissue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.InvokeScriptResult.Reissue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.Reissue.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: msg.getAssetId_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isReissuable: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.InvokeScriptResult.Reissue}
 */
proto.zb.InvokeScriptResult.Reissue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.InvokeScriptResult.Reissue;
  return proto.zb.InvokeScriptResult.Reissue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.InvokeScriptResult.Reissue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.InvokeScriptResult.Reissue}
 */
proto.zb.InvokeScriptResult.Reissue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsReissuable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.Reissue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.InvokeScriptResult.Reissue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.InvokeScriptResult.Reissue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.Reissue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getIsReissuable();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bytes asset_id = 1;
 * @return {string}
 */
proto.zb.InvokeScriptResult.Reissue.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes asset_id = 1;
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {string}
 */
proto.zb.InvokeScriptResult.Reissue.prototype.getAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetId()));
};


/**
 * optional bytes asset_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.Reissue.prototype.getAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.InvokeScriptResult.Reissue.prototype.setAssetId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.zb.InvokeScriptResult.Reissue.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.zb.InvokeScriptResult.Reissue.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool is_reissuable = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.zb.InvokeScriptResult.Reissue.prototype.getIsReissuable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.zb.InvokeScriptResult.Reissue.prototype.setIsReissuable = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.InvokeScriptResult.Burn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.InvokeScriptResult.Burn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.InvokeScriptResult.Burn.displayName = 'proto.zb.InvokeScriptResult.Burn';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.InvokeScriptResult.Burn.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.InvokeScriptResult.Burn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.InvokeScriptResult.Burn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.Burn.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: msg.getAssetId_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.InvokeScriptResult.Burn}
 */
proto.zb.InvokeScriptResult.Burn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.InvokeScriptResult.Burn;
  return proto.zb.InvokeScriptResult.Burn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.InvokeScriptResult.Burn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.InvokeScriptResult.Burn}
 */
proto.zb.InvokeScriptResult.Burn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.Burn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.InvokeScriptResult.Burn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.InvokeScriptResult.Burn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.Burn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes asset_id = 1;
 * @return {string}
 */
proto.zb.InvokeScriptResult.Burn.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes asset_id = 1;
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {string}
 */
proto.zb.InvokeScriptResult.Burn.prototype.getAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetId()));
};


/**
 * optional bytes asset_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.Burn.prototype.getAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.InvokeScriptResult.Burn.prototype.setAssetId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.zb.InvokeScriptResult.Burn.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.zb.InvokeScriptResult.Burn.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.InvokeScriptResult.SponsorFee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.InvokeScriptResult.SponsorFee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.InvokeScriptResult.SponsorFee.displayName = 'proto.zb.InvokeScriptResult.SponsorFee';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.InvokeScriptResult.SponsorFee.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.InvokeScriptResult.SponsorFee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.InvokeScriptResult.SponsorFee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.SponsorFee.toObject = function(includeInstance, msg) {
  var f, obj = {
    minFee: (f = msg.getMinFee()) && amount_pb.Amount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.InvokeScriptResult.SponsorFee}
 */
proto.zb.InvokeScriptResult.SponsorFee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.InvokeScriptResult.SponsorFee;
  return proto.zb.InvokeScriptResult.SponsorFee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.InvokeScriptResult.SponsorFee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.InvokeScriptResult.SponsorFee}
 */
proto.zb.InvokeScriptResult.SponsorFee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new amount_pb.Amount;
      reader.readMessage(value,amount_pb.Amount.deserializeBinaryFromReader);
      msg.setMinFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.SponsorFee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.InvokeScriptResult.SponsorFee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.InvokeScriptResult.SponsorFee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.SponsorFee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinFee();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      amount_pb.Amount.serializeBinaryToWriter
    );
  }
};


/**
 * optional Amount min_fee = 1;
 * @return {?proto.zb.Amount}
 */
proto.zb.InvokeScriptResult.SponsorFee.prototype.getMinFee = function() {
  return /** @type{?proto.zb.Amount} */ (
    jspb.Message.getWrapperField(this, amount_pb.Amount, 1));
};


/** @param {?proto.zb.Amount|undefined} value */
proto.zb.InvokeScriptResult.SponsorFee.prototype.setMinFee = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zb.InvokeScriptResult.SponsorFee.prototype.clearMinFee = function() {
  this.setMinFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.InvokeScriptResult.SponsorFee.prototype.hasMinFee = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.InvokeScriptResult.Lease = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.InvokeScriptResult.Lease, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.InvokeScriptResult.Lease.displayName = 'proto.zb.InvokeScriptResult.Lease';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.InvokeScriptResult.Lease.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.InvokeScriptResult.Lease.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.InvokeScriptResult.Lease} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.Lease.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipient: (f = msg.getRecipient()) && recipient_pb.Recipient.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nonce: jspb.Message.getFieldWithDefault(msg, 3, 0),
    leaseId: msg.getLeaseId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.InvokeScriptResult.Lease}
 */
proto.zb.InvokeScriptResult.Lease.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.InvokeScriptResult.Lease;
  return proto.zb.InvokeScriptResult.Lease.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.InvokeScriptResult.Lease} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.InvokeScriptResult.Lease}
 */
proto.zb.InvokeScriptResult.Lease.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new recipient_pb.Recipient;
      reader.readMessage(value,recipient_pb.Recipient.deserializeBinaryFromReader);
      msg.setRecipient(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNonce(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLeaseId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.Lease.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.InvokeScriptResult.Lease.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.InvokeScriptResult.Lease} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.Lease.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipient();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      recipient_pb.Recipient.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getLeaseId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional Recipient recipient = 1;
 * @return {?proto.zb.Recipient}
 */
proto.zb.InvokeScriptResult.Lease.prototype.getRecipient = function() {
  return /** @type{?proto.zb.Recipient} */ (
    jspb.Message.getWrapperField(this, recipient_pb.Recipient, 1));
};


/** @param {?proto.zb.Recipient|undefined} value */
proto.zb.InvokeScriptResult.Lease.prototype.setRecipient = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zb.InvokeScriptResult.Lease.prototype.clearRecipient = function() {
  this.setRecipient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.InvokeScriptResult.Lease.prototype.hasRecipient = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.zb.InvokeScriptResult.Lease.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.zb.InvokeScriptResult.Lease.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 nonce = 3;
 * @return {number}
 */
proto.zb.InvokeScriptResult.Lease.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.zb.InvokeScriptResult.Lease.prototype.setNonce = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes lease_id = 4;
 * @return {string}
 */
proto.zb.InvokeScriptResult.Lease.prototype.getLeaseId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes lease_id = 4;
 * This is a type-conversion wrapper around `getLeaseId()`
 * @return {string}
 */
proto.zb.InvokeScriptResult.Lease.prototype.getLeaseId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLeaseId()));
};


/**
 * optional bytes lease_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLeaseId()`
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.Lease.prototype.getLeaseId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLeaseId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.InvokeScriptResult.Lease.prototype.setLeaseId = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.InvokeScriptResult.LeaseCancel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.InvokeScriptResult.LeaseCancel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.InvokeScriptResult.LeaseCancel.displayName = 'proto.zb.InvokeScriptResult.LeaseCancel';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.InvokeScriptResult.LeaseCancel.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.InvokeScriptResult.LeaseCancel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.InvokeScriptResult.LeaseCancel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.LeaseCancel.toObject = function(includeInstance, msg) {
  var f, obj = {
    leaseId: msg.getLeaseId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.InvokeScriptResult.LeaseCancel}
 */
proto.zb.InvokeScriptResult.LeaseCancel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.InvokeScriptResult.LeaseCancel;
  return proto.zb.InvokeScriptResult.LeaseCancel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.InvokeScriptResult.LeaseCancel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.InvokeScriptResult.LeaseCancel}
 */
proto.zb.InvokeScriptResult.LeaseCancel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLeaseId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.LeaseCancel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.InvokeScriptResult.LeaseCancel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.InvokeScriptResult.LeaseCancel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.LeaseCancel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeaseId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes lease_id = 1;
 * @return {string}
 */
proto.zb.InvokeScriptResult.LeaseCancel.prototype.getLeaseId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes lease_id = 1;
 * This is a type-conversion wrapper around `getLeaseId()`
 * @return {string}
 */
proto.zb.InvokeScriptResult.LeaseCancel.prototype.getLeaseId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLeaseId()));
};


/**
 * optional bytes lease_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLeaseId()`
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.LeaseCancel.prototype.getLeaseId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLeaseId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.InvokeScriptResult.LeaseCancel.prototype.setLeaseId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.InvokeScriptResult.ErrorMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.InvokeScriptResult.ErrorMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.InvokeScriptResult.ErrorMessage.displayName = 'proto.zb.InvokeScriptResult.ErrorMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.InvokeScriptResult.ErrorMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.InvokeScriptResult.ErrorMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.InvokeScriptResult.ErrorMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.ErrorMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    text: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.InvokeScriptResult.ErrorMessage}
 */
proto.zb.InvokeScriptResult.ErrorMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.InvokeScriptResult.ErrorMessage;
  return proto.zb.InvokeScriptResult.ErrorMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.InvokeScriptResult.ErrorMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.InvokeScriptResult.ErrorMessage}
 */
proto.zb.InvokeScriptResult.ErrorMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.ErrorMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.InvokeScriptResult.ErrorMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.InvokeScriptResult.ErrorMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.ErrorMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.zb.InvokeScriptResult.ErrorMessage.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.zb.InvokeScriptResult.ErrorMessage.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.zb.InvokeScriptResult.ErrorMessage.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.zb.InvokeScriptResult.ErrorMessage.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.InvokeScriptResult.Call = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zb.InvokeScriptResult.Call.repeatedFields_, null);
};
goog.inherits(proto.zb.InvokeScriptResult.Call, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.InvokeScriptResult.Call.displayName = 'proto.zb.InvokeScriptResult.Call';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zb.InvokeScriptResult.Call.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.InvokeScriptResult.Call.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.InvokeScriptResult.Call.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.InvokeScriptResult.Call} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.Call.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_function: jspb.Message.getFieldWithDefault(msg, 1, ""),
    argsList: msg.getArgsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.InvokeScriptResult.Call}
 */
proto.zb.InvokeScriptResult.Call.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.InvokeScriptResult.Call;
  return proto.zb.InvokeScriptResult.Call.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.InvokeScriptResult.Call} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.InvokeScriptResult.Call}
 */
proto.zb.InvokeScriptResult.Call.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunction(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.Call.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.InvokeScriptResult.Call.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.InvokeScriptResult.Call} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.Call.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArgsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional string function = 1;
 * @return {string}
 */
proto.zb.InvokeScriptResult.Call.prototype.getFunction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.zb.InvokeScriptResult.Call.prototype.setFunction = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated bytes args = 2;
 * @return {!Array<string>}
 */
proto.zb.InvokeScriptResult.Call.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes args = 2;
 * This is a type-conversion wrapper around `getArgsList()`
 * @return {!Array<string>}
 */
proto.zb.InvokeScriptResult.Call.prototype.getArgsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getArgsList()));
};


/**
 * repeated bytes args = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getArgsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.zb.InvokeScriptResult.Call.prototype.getArgsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getArgsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.zb.InvokeScriptResult.Call.prototype.setArgsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.zb.InvokeScriptResult.Call.prototype.addArgs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.zb.InvokeScriptResult.Call.prototype.clearArgsList = function() {
  this.setArgsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.InvokeScriptResult.Invocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zb.InvokeScriptResult.Invocation.repeatedFields_, null);
};
goog.inherits(proto.zb.InvokeScriptResult.Invocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.InvokeScriptResult.Invocation.displayName = 'proto.zb.InvokeScriptResult.Invocation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zb.InvokeScriptResult.Invocation.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.InvokeScriptResult.Invocation.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.InvokeScriptResult.Invocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.InvokeScriptResult.Invocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.Invocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    dapp: msg.getDapp_asB64(),
    call: (f = msg.getCall()) && proto.zb.InvokeScriptResult.Call.toObject(includeInstance, f),
    paymentsList: jspb.Message.toObjectList(msg.getPaymentsList(),
    amount_pb.Amount.toObject, includeInstance),
    statechanges: (f = msg.getStatechanges()) && proto.zb.InvokeScriptResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.InvokeScriptResult.Invocation}
 */
proto.zb.InvokeScriptResult.Invocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.InvokeScriptResult.Invocation;
  return proto.zb.InvokeScriptResult.Invocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.InvokeScriptResult.Invocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.InvokeScriptResult.Invocation}
 */
proto.zb.InvokeScriptResult.Invocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDapp(value);
      break;
    case 2:
      var value = new proto.zb.InvokeScriptResult.Call;
      reader.readMessage(value,proto.zb.InvokeScriptResult.Call.deserializeBinaryFromReader);
      msg.setCall(value);
      break;
    case 3:
      var value = new amount_pb.Amount;
      reader.readMessage(value,amount_pb.Amount.deserializeBinaryFromReader);
      msg.addPayments(value);
      break;
    case 4:
      var value = new proto.zb.InvokeScriptResult;
      reader.readMessage(value,proto.zb.InvokeScriptResult.deserializeBinaryFromReader);
      msg.setStatechanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.Invocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.InvokeScriptResult.Invocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.InvokeScriptResult.Invocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.InvokeScriptResult.Invocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDapp_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCall();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.zb.InvokeScriptResult.Call.serializeBinaryToWriter
    );
  }
  f = message.getPaymentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      amount_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getStatechanges();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.zb.InvokeScriptResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes dApp = 1;
 * @return {string}
 */
proto.zb.InvokeScriptResult.Invocation.prototype.getDapp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dApp = 1;
 * This is a type-conversion wrapper around `getDapp()`
 * @return {string}
 */
proto.zb.InvokeScriptResult.Invocation.prototype.getDapp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDapp()));
};


/**
 * optional bytes dApp = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDapp()`
 * @return {!Uint8Array}
 */
proto.zb.InvokeScriptResult.Invocation.prototype.getDapp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDapp()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.InvokeScriptResult.Invocation.prototype.setDapp = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Call call = 2;
 * @return {?proto.zb.InvokeScriptResult.Call}
 */
proto.zb.InvokeScriptResult.Invocation.prototype.getCall = function() {
  return /** @type{?proto.zb.InvokeScriptResult.Call} */ (
    jspb.Message.getWrapperField(this, proto.zb.InvokeScriptResult.Call, 2));
};


/** @param {?proto.zb.InvokeScriptResult.Call|undefined} value */
proto.zb.InvokeScriptResult.Invocation.prototype.setCall = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.zb.InvokeScriptResult.Invocation.prototype.clearCall = function() {
  this.setCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.InvokeScriptResult.Invocation.prototype.hasCall = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Amount payments = 3;
 * @return {!Array<!proto.zb.Amount>}
 */
proto.zb.InvokeScriptResult.Invocation.prototype.getPaymentsList = function() {
  return /** @type{!Array<!proto.zb.Amount>} */ (
    jspb.Message.getRepeatedWrapperField(this, amount_pb.Amount, 3));
};


/** @param {!Array<!proto.zb.Amount>} value */
proto.zb.InvokeScriptResult.Invocation.prototype.setPaymentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.zb.Amount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zb.Amount}
 */
proto.zb.InvokeScriptResult.Invocation.prototype.addPayments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.zb.Amount, opt_index);
};


proto.zb.InvokeScriptResult.Invocation.prototype.clearPaymentsList = function() {
  this.setPaymentsList([]);
};


/**
 * optional InvokeScriptResult stateChanges = 4;
 * @return {?proto.zb.InvokeScriptResult}
 */
proto.zb.InvokeScriptResult.Invocation.prototype.getStatechanges = function() {
  return /** @type{?proto.zb.InvokeScriptResult} */ (
    jspb.Message.getWrapperField(this, proto.zb.InvokeScriptResult, 4));
};


/** @param {?proto.zb.InvokeScriptResult|undefined} value */
proto.zb.InvokeScriptResult.Invocation.prototype.setStatechanges = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.zb.InvokeScriptResult.Invocation.prototype.clearStatechanges = function() {
  this.setStatechanges(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.InvokeScriptResult.Invocation.prototype.hasStatechanges = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated DataTransactionData.DataEntry data = 1;
 * @return {!Array<!proto.zb.DataTransactionData.DataEntry>}
 */
proto.zb.InvokeScriptResult.prototype.getDataList = function() {
  return /** @type{!Array<!proto.zb.DataTransactionData.DataEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, transaction_pb.DataTransactionData.DataEntry, 1));
};


/** @param {!Array<!proto.zb.DataTransactionData.DataEntry>} value */
proto.zb.InvokeScriptResult.prototype.setDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.zb.DataTransactionData.DataEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zb.DataTransactionData.DataEntry}
 */
proto.zb.InvokeScriptResult.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.zb.DataTransactionData.DataEntry, opt_index);
};


proto.zb.InvokeScriptResult.prototype.clearDataList = function() {
  this.setDataList([]);
};


/**
 * repeated Payment transfers = 2;
 * @return {!Array<!proto.zb.InvokeScriptResult.Payment>}
 */
proto.zb.InvokeScriptResult.prototype.getTransfersList = function() {
  return /** @type{!Array<!proto.zb.InvokeScriptResult.Payment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zb.InvokeScriptResult.Payment, 2));
};


/** @param {!Array<!proto.zb.InvokeScriptResult.Payment>} value */
proto.zb.InvokeScriptResult.prototype.setTransfersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.zb.InvokeScriptResult.Payment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zb.InvokeScriptResult.Payment}
 */
proto.zb.InvokeScriptResult.prototype.addTransfers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.zb.InvokeScriptResult.Payment, opt_index);
};


proto.zb.InvokeScriptResult.prototype.clearTransfersList = function() {
  this.setTransfersList([]);
};


/**
 * repeated Issue issues = 3;
 * @return {!Array<!proto.zb.InvokeScriptResult.Issue>}
 */
proto.zb.InvokeScriptResult.prototype.getIssuesList = function() {
  return /** @type{!Array<!proto.zb.InvokeScriptResult.Issue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zb.InvokeScriptResult.Issue, 3));
};


/** @param {!Array<!proto.zb.InvokeScriptResult.Issue>} value */
proto.zb.InvokeScriptResult.prototype.setIssuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.zb.InvokeScriptResult.Issue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zb.InvokeScriptResult.Issue}
 */
proto.zb.InvokeScriptResult.prototype.addIssues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.zb.InvokeScriptResult.Issue, opt_index);
};


proto.zb.InvokeScriptResult.prototype.clearIssuesList = function() {
  this.setIssuesList([]);
};


/**
 * repeated Reissue reissues = 4;
 * @return {!Array<!proto.zb.InvokeScriptResult.Reissue>}
 */
proto.zb.InvokeScriptResult.prototype.getReissuesList = function() {
  return /** @type{!Array<!proto.zb.InvokeScriptResult.Reissue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zb.InvokeScriptResult.Reissue, 4));
};


/** @param {!Array<!proto.zb.InvokeScriptResult.Reissue>} value */
proto.zb.InvokeScriptResult.prototype.setReissuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.zb.InvokeScriptResult.Reissue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zb.InvokeScriptResult.Reissue}
 */
proto.zb.InvokeScriptResult.prototype.addReissues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.zb.InvokeScriptResult.Reissue, opt_index);
};


proto.zb.InvokeScriptResult.prototype.clearReissuesList = function() {
  this.setReissuesList([]);
};


/**
 * repeated Burn burns = 5;
 * @return {!Array<!proto.zb.InvokeScriptResult.Burn>}
 */
proto.zb.InvokeScriptResult.prototype.getBurnsList = function() {
  return /** @type{!Array<!proto.zb.InvokeScriptResult.Burn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zb.InvokeScriptResult.Burn, 5));
};


/** @param {!Array<!proto.zb.InvokeScriptResult.Burn>} value */
proto.zb.InvokeScriptResult.prototype.setBurnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.zb.InvokeScriptResult.Burn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zb.InvokeScriptResult.Burn}
 */
proto.zb.InvokeScriptResult.prototype.addBurns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.zb.InvokeScriptResult.Burn, opt_index);
};


proto.zb.InvokeScriptResult.prototype.clearBurnsList = function() {
  this.setBurnsList([]);
};


/**
 * optional ErrorMessage error_message = 6;
 * @return {?proto.zb.InvokeScriptResult.ErrorMessage}
 */
proto.zb.InvokeScriptResult.prototype.getErrorMessage = function() {
  return /** @type{?proto.zb.InvokeScriptResult.ErrorMessage} */ (
    jspb.Message.getWrapperField(this, proto.zb.InvokeScriptResult.ErrorMessage, 6));
};


/** @param {?proto.zb.InvokeScriptResult.ErrorMessage|undefined} value */
proto.zb.InvokeScriptResult.prototype.setErrorMessage = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.zb.InvokeScriptResult.prototype.clearErrorMessage = function() {
  this.setErrorMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.InvokeScriptResult.prototype.hasErrorMessage = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated SponsorFee sponsor_fees = 7;
 * @return {!Array<!proto.zb.InvokeScriptResult.SponsorFee>}
 */
proto.zb.InvokeScriptResult.prototype.getSponsorFeesList = function() {
  return /** @type{!Array<!proto.zb.InvokeScriptResult.SponsorFee>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zb.InvokeScriptResult.SponsorFee, 7));
};


/** @param {!Array<!proto.zb.InvokeScriptResult.SponsorFee>} value */
proto.zb.InvokeScriptResult.prototype.setSponsorFeesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.zb.InvokeScriptResult.SponsorFee=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zb.InvokeScriptResult.SponsorFee}
 */
proto.zb.InvokeScriptResult.prototype.addSponsorFees = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.zb.InvokeScriptResult.SponsorFee, opt_index);
};


proto.zb.InvokeScriptResult.prototype.clearSponsorFeesList = function() {
  this.setSponsorFeesList([]);
};


/**
 * repeated Lease leases = 8;
 * @return {!Array<!proto.zb.InvokeScriptResult.Lease>}
 */
proto.zb.InvokeScriptResult.prototype.getLeasesList = function() {
  return /** @type{!Array<!proto.zb.InvokeScriptResult.Lease>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zb.InvokeScriptResult.Lease, 8));
};


/** @param {!Array<!proto.zb.InvokeScriptResult.Lease>} value */
proto.zb.InvokeScriptResult.prototype.setLeasesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.zb.InvokeScriptResult.Lease=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zb.InvokeScriptResult.Lease}
 */
proto.zb.InvokeScriptResult.prototype.addLeases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.zb.InvokeScriptResult.Lease, opt_index);
};


proto.zb.InvokeScriptResult.prototype.clearLeasesList = function() {
  this.setLeasesList([]);
};


/**
 * repeated LeaseCancel lease_cancels = 9;
 * @return {!Array<!proto.zb.InvokeScriptResult.LeaseCancel>}
 */
proto.zb.InvokeScriptResult.prototype.getLeaseCancelsList = function() {
  return /** @type{!Array<!proto.zb.InvokeScriptResult.LeaseCancel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zb.InvokeScriptResult.LeaseCancel, 9));
};


/** @param {!Array<!proto.zb.InvokeScriptResult.LeaseCancel>} value */
proto.zb.InvokeScriptResult.prototype.setLeaseCancelsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.zb.InvokeScriptResult.LeaseCancel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zb.InvokeScriptResult.LeaseCancel}
 */
proto.zb.InvokeScriptResult.prototype.addLeaseCancels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.zb.InvokeScriptResult.LeaseCancel, opt_index);
};


proto.zb.InvokeScriptResult.prototype.clearLeaseCancelsList = function() {
  this.setLeaseCancelsList([]);
};


/**
 * repeated Invocation invokes = 10;
 * @return {!Array<!proto.zb.InvokeScriptResult.Invocation>}
 */
proto.zb.InvokeScriptResult.prototype.getInvokesList = function() {
  return /** @type{!Array<!proto.zb.InvokeScriptResult.Invocation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zb.InvokeScriptResult.Invocation, 10));
};


/** @param {!Array<!proto.zb.InvokeScriptResult.Invocation>} value */
proto.zb.InvokeScriptResult.prototype.setInvokesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.zb.InvokeScriptResult.Invocation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zb.InvokeScriptResult.Invocation}
 */
proto.zb.InvokeScriptResult.prototype.addInvokes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.zb.InvokeScriptResult.Invocation, opt_index);
};


proto.zb.InvokeScriptResult.prototype.clearInvokesList = function() {
  this.setInvokesList([]);
};


goog.object.extend(exports, proto.zb);
