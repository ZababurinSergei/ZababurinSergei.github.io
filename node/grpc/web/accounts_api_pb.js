/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var amount_pb = require('./amount_pb.js');
var transaction_pb = require('./transaction_pb.js');
var recipient_pb = require('./recipient_pb.js');
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.exportSymbol('proto.zb.node.grpc.AccountRequest', null, global);
goog.exportSymbol('proto.zb.node.grpc.BalanceResponse', null, global);
goog.exportSymbol('proto.zb.node.grpc.BalanceResponse.WavesBalances', null, global);
goog.exportSymbol('proto.zb.node.grpc.BalancesRequest', null, global);
goog.exportSymbol('proto.zb.node.grpc.DataEntryResponse', null, global);
goog.exportSymbol('proto.zb.node.grpc.DataRequest', null, global);
goog.exportSymbol('proto.zb.node.grpc.LeaseResponse', null, global);
goog.exportSymbol('proto.zb.node.grpc.ScriptData', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.AccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.node.grpc.AccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.AccountRequest.displayName = 'proto.zb.node.grpc.AccountRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.AccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.AccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.AccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.AccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.AccountRequest}
 */
proto.zb.node.grpc.AccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.AccountRequest;
  return proto.zb.node.grpc.AccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.AccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.AccountRequest}
 */
proto.zb.node.grpc.AccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.AccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.AccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.AccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.AccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {string}
 */
proto.zb.node.grpc.AccountRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.zb.node.grpc.AccountRequest.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.AccountRequest.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.AccountRequest.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.DataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.node.grpc.DataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.DataRequest.displayName = 'proto.zb.node.grpc.DataRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.DataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.DataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.DataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.DataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    key: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.DataRequest}
 */
proto.zb.node.grpc.DataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.DataRequest;
  return proto.zb.node.grpc.DataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.DataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.DataRequest}
 */
proto.zb.node.grpc.DataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.DataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.DataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.DataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.DataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {string}
 */
proto.zb.node.grpc.DataRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.zb.node.grpc.DataRequest.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.DataRequest.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.DataRequest.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.zb.node.grpc.DataRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.zb.node.grpc.DataRequest.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.BalancesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zb.node.grpc.BalancesRequest.repeatedFields_, null);
};
goog.inherits(proto.zb.node.grpc.BalancesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.BalancesRequest.displayName = 'proto.zb.node.grpc.BalancesRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zb.node.grpc.BalancesRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.BalancesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.BalancesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.BalancesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.BalancesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    assetsList: msg.getAssetsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.BalancesRequest}
 */
proto.zb.node.grpc.BalancesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.BalancesRequest;
  return proto.zb.node.grpc.BalancesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.BalancesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.BalancesRequest}
 */
proto.zb.node.grpc.BalancesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAssets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.BalancesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.BalancesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.BalancesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.BalancesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAssetsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {string}
 */
proto.zb.node.grpc.BalancesRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.zb.node.grpc.BalancesRequest.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.BalancesRequest.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.BalancesRequest.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes assets = 4;
 * @return {!Array<string>}
 */
proto.zb.node.grpc.BalancesRequest.prototype.getAssetsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * repeated bytes assets = 4;
 * This is a type-conversion wrapper around `getAssetsList()`
 * @return {!Array<string>}
 */
proto.zb.node.grpc.BalancesRequest.prototype.getAssetsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getAssetsList()));
};


/**
 * repeated bytes assets = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.zb.node.grpc.BalancesRequest.prototype.getAssetsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAssetsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.zb.node.grpc.BalancesRequest.prototype.setAssetsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.zb.node.grpc.BalancesRequest.prototype.addAssets = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.zb.node.grpc.BalancesRequest.prototype.clearAssetsList = function() {
  this.setAssetsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.BalanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.zb.node.grpc.BalanceResponse.oneofGroups_);
};
goog.inherits(proto.zb.node.grpc.BalanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.BalanceResponse.displayName = 'proto.zb.node.grpc.BalanceResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.zb.node.grpc.BalanceResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.zb.node.grpc.BalanceResponse.BalanceCase = {
  BALANCE_NOT_SET: 0,
  WAVES: 1,
  ASSET: 2
};

/**
 * @return {proto.zb.node.grpc.BalanceResponse.BalanceCase}
 */
proto.zb.node.grpc.BalanceResponse.prototype.getBalanceCase = function() {
  return /** @type {proto.zb.node.grpc.BalanceResponse.BalanceCase} */(jspb.Message.computeOneofCase(this, proto.zb.node.grpc.BalanceResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.BalanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.BalanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.BalanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.BalanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    waves: (f = msg.getWaves()) && proto.zb.node.grpc.BalanceResponse.WavesBalances.toObject(includeInstance, f),
    asset: (f = msg.getAsset()) && amount_pb.Amount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.BalanceResponse}
 */
proto.zb.node.grpc.BalanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.BalanceResponse;
  return proto.zb.node.grpc.BalanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.BalanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.BalanceResponse}
 */
proto.zb.node.grpc.BalanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.zb.node.grpc.BalanceResponse.WavesBalances;
      reader.readMessage(value,proto.zb.node.grpc.BalanceResponse.WavesBalances.deserializeBinaryFromReader);
      msg.setWaves(value);
      break;
    case 2:
      var value = new amount_pb.Amount;
      reader.readMessage(value,amount_pb.Amount.deserializeBinaryFromReader);
      msg.setAsset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.BalanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.BalanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.BalanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.BalanceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWaves();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.zb.node.grpc.BalanceResponse.WavesBalances.serializeBinaryToWriter
    );
  }
  f = message.getAsset();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      amount_pb.Amount.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.BalanceResponse.WavesBalances = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.node.grpc.BalanceResponse.WavesBalances, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.BalanceResponse.WavesBalances.displayName = 'proto.zb.node.grpc.BalanceResponse.WavesBalances';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.BalanceResponse.WavesBalances.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.BalanceResponse.WavesBalances.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.BalanceResponse.WavesBalances} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.BalanceResponse.WavesBalances.toObject = function(includeInstance, msg) {
  var f, obj = {
    regular: jspb.Message.getFieldWithDefault(msg, 1, 0),
    generating: jspb.Message.getFieldWithDefault(msg, 2, 0),
    available: jspb.Message.getFieldWithDefault(msg, 3, 0),
    effective: jspb.Message.getFieldWithDefault(msg, 4, 0),
    leaseIn: jspb.Message.getFieldWithDefault(msg, 5, 0),
    leaseOut: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.BalanceResponse.WavesBalances}
 */
proto.zb.node.grpc.BalanceResponse.WavesBalances.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.BalanceResponse.WavesBalances;
  return proto.zb.node.grpc.BalanceResponse.WavesBalances.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.BalanceResponse.WavesBalances} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.BalanceResponse.WavesBalances}
 */
proto.zb.node.grpc.BalanceResponse.WavesBalances.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRegular(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGenerating(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAvailable(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEffective(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLeaseIn(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLeaseOut(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.BalanceResponse.WavesBalances.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.BalanceResponse.WavesBalances.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.BalanceResponse.WavesBalances} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.BalanceResponse.WavesBalances.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegular();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getGenerating();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getAvailable();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEffective();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getLeaseIn();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getLeaseOut();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional int64 regular = 1;
 * @return {number}
 */
proto.zb.node.grpc.BalanceResponse.WavesBalances.prototype.getRegular = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.zb.node.grpc.BalanceResponse.WavesBalances.prototype.setRegular = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 generating = 2;
 * @return {number}
 */
proto.zb.node.grpc.BalanceResponse.WavesBalances.prototype.getGenerating = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.zb.node.grpc.BalanceResponse.WavesBalances.prototype.setGenerating = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 available = 3;
 * @return {number}
 */
proto.zb.node.grpc.BalanceResponse.WavesBalances.prototype.getAvailable = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.zb.node.grpc.BalanceResponse.WavesBalances.prototype.setAvailable = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 effective = 4;
 * @return {number}
 */
proto.zb.node.grpc.BalanceResponse.WavesBalances.prototype.getEffective = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.zb.node.grpc.BalanceResponse.WavesBalances.prototype.setEffective = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 lease_in = 5;
 * @return {number}
 */
proto.zb.node.grpc.BalanceResponse.WavesBalances.prototype.getLeaseIn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.zb.node.grpc.BalanceResponse.WavesBalances.prototype.setLeaseIn = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 lease_out = 6;
 * @return {number}
 */
proto.zb.node.grpc.BalanceResponse.WavesBalances.prototype.getLeaseOut = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.zb.node.grpc.BalanceResponse.WavesBalances.prototype.setLeaseOut = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional WavesBalances waves = 1;
 * @return {?proto.zb.node.grpc.BalanceResponse.WavesBalances}
 */
proto.zb.node.grpc.BalanceResponse.prototype.getWaves = function() {
  return /** @type{?proto.zb.node.grpc.BalanceResponse.WavesBalances} */ (
    jspb.Message.getWrapperField(this, proto.zb.node.grpc.BalanceResponse.WavesBalances, 1));
};


/** @param {?proto.zb.node.grpc.BalanceResponse.WavesBalances|undefined} value */
proto.zb.node.grpc.BalanceResponse.prototype.setWaves = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.zb.node.grpc.BalanceResponse.oneofGroups_[0], value);
};


proto.zb.node.grpc.BalanceResponse.prototype.clearWaves = function() {
  this.setWaves(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.node.grpc.BalanceResponse.prototype.hasWaves = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional zb.Amount asset = 2;
 * @return {?proto.zb.Amount}
 */
proto.zb.node.grpc.BalanceResponse.prototype.getAsset = function() {
  return /** @type{?proto.zb.Amount} */ (
    jspb.Message.getWrapperField(this, amount_pb.Amount, 2));
};


/** @param {?proto.zb.Amount|undefined} value */
proto.zb.node.grpc.BalanceResponse.prototype.setAsset = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.zb.node.grpc.BalanceResponse.oneofGroups_[0], value);
};


proto.zb.node.grpc.BalanceResponse.prototype.clearAsset = function() {
  this.setAsset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.node.grpc.BalanceResponse.prototype.hasAsset = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.DataEntryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.node.grpc.DataEntryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.DataEntryResponse.displayName = 'proto.zb.node.grpc.DataEntryResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.DataEntryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.DataEntryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.DataEntryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.DataEntryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    entry: (f = msg.getEntry()) && transaction_pb.DataTransactionData.DataEntry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.DataEntryResponse}
 */
proto.zb.node.grpc.DataEntryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.DataEntryResponse;
  return proto.zb.node.grpc.DataEntryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.DataEntryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.DataEntryResponse}
 */
proto.zb.node.grpc.DataEntryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = new transaction_pb.DataTransactionData.DataEntry;
      reader.readMessage(value,transaction_pb.DataTransactionData.DataEntry.deserializeBinaryFromReader);
      msg.setEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.DataEntryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.DataEntryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.DataEntryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.DataEntryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEntry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      transaction_pb.DataTransactionData.DataEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {string}
 */
proto.zb.node.grpc.DataEntryResponse.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.zb.node.grpc.DataEntryResponse.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.DataEntryResponse.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.DataEntryResponse.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional zb.DataTransactionData.DataEntry entry = 2;
 * @return {?proto.zb.DataTransactionData.DataEntry}
 */
proto.zb.node.grpc.DataEntryResponse.prototype.getEntry = function() {
  return /** @type{?proto.zb.DataTransactionData.DataEntry} */ (
    jspb.Message.getWrapperField(this, transaction_pb.DataTransactionData.DataEntry, 2));
};


/** @param {?proto.zb.DataTransactionData.DataEntry|undefined} value */
proto.zb.node.grpc.DataEntryResponse.prototype.setEntry = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.zb.node.grpc.DataEntryResponse.prototype.clearEntry = function() {
  this.setEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.node.grpc.DataEntryResponse.prototype.hasEntry = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.ScriptData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.node.grpc.ScriptData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.ScriptData.displayName = 'proto.zb.node.grpc.ScriptData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.ScriptData.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.ScriptData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.ScriptData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.ScriptData.toObject = function(includeInstance, msg) {
  var f, obj = {
    scriptBytes: msg.getScriptBytes_asB64(),
    scriptText: jspb.Message.getFieldWithDefault(msg, 2, ""),
    complexity: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.ScriptData}
 */
proto.zb.node.grpc.ScriptData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.ScriptData;
  return proto.zb.node.grpc.ScriptData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.ScriptData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.ScriptData}
 */
proto.zb.node.grpc.ScriptData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScriptBytes(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScriptText(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setComplexity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.ScriptData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.ScriptData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.ScriptData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.ScriptData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScriptBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getScriptText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getComplexity();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional bytes script_bytes = 1;
 * @return {string}
 */
proto.zb.node.grpc.ScriptData.prototype.getScriptBytes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes script_bytes = 1;
 * This is a type-conversion wrapper around `getScriptBytes()`
 * @return {string}
 */
proto.zb.node.grpc.ScriptData.prototype.getScriptBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScriptBytes()));
};


/**
 * optional bytes script_bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScriptBytes()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.ScriptData.prototype.getScriptBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScriptBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.ScriptData.prototype.setScriptBytes = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string script_text = 2;
 * @return {string}
 */
proto.zb.node.grpc.ScriptData.prototype.getScriptText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.zb.node.grpc.ScriptData.prototype.setScriptText = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 complexity = 3;
 * @return {number}
 */
proto.zb.node.grpc.ScriptData.prototype.getComplexity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.zb.node.grpc.ScriptData.prototype.setComplexity = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.LeaseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.node.grpc.LeaseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.LeaseResponse.displayName = 'proto.zb.node.grpc.LeaseResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.LeaseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.LeaseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.LeaseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.LeaseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    leaseid: msg.getLeaseid_asB64(),
    origintransactionid: msg.getOrigintransactionid_asB64(),
    sender: msg.getSender_asB64(),
    recipient: (f = msg.getRecipient()) && recipient_pb.Recipient.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    height: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.LeaseResponse}
 */
proto.zb.node.grpc.LeaseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.LeaseResponse;
  return proto.zb.node.grpc.LeaseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.LeaseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.LeaseResponse}
 */
proto.zb.node.grpc.LeaseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLeaseid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOrigintransactionid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSender(value);
      break;
    case 4:
      var value = new recipient_pb.Recipient;
      reader.readMessage(value,recipient_pb.Recipient.deserializeBinaryFromReader);
      msg.setRecipient(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.LeaseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.LeaseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.LeaseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.LeaseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeaseid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getOrigintransactionid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSender_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getRecipient();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      recipient_pb.Recipient.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional bytes leaseId = 1;
 * @return {string}
 */
proto.zb.node.grpc.LeaseResponse.prototype.getLeaseid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes leaseId = 1;
 * This is a type-conversion wrapper around `getLeaseid()`
 * @return {string}
 */
proto.zb.node.grpc.LeaseResponse.prototype.getLeaseid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLeaseid()));
};


/**
 * optional bytes leaseId = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLeaseid()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.LeaseResponse.prototype.getLeaseid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLeaseid()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.LeaseResponse.prototype.setLeaseid = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes originTransactionId = 2;
 * @return {string}
 */
proto.zb.node.grpc.LeaseResponse.prototype.getOrigintransactionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes originTransactionId = 2;
 * This is a type-conversion wrapper around `getOrigintransactionid()`
 * @return {string}
 */
proto.zb.node.grpc.LeaseResponse.prototype.getOrigintransactionid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOrigintransactionid()));
};


/**
 * optional bytes originTransactionId = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrigintransactionid()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.LeaseResponse.prototype.getOrigintransactionid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOrigintransactionid()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.LeaseResponse.prototype.setOrigintransactionid = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes sender = 3;
 * @return {string}
 */
proto.zb.node.grpc.LeaseResponse.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sender = 3;
 * This is a type-conversion wrapper around `getSender()`
 * @return {string}
 */
proto.zb.node.grpc.LeaseResponse.prototype.getSender_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSender()));
};


/**
 * optional bytes sender = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSender()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.LeaseResponse.prototype.getSender_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSender()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.LeaseResponse.prototype.setSender = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional zb.Recipient recipient = 4;
 * @return {?proto.zb.Recipient}
 */
proto.zb.node.grpc.LeaseResponse.prototype.getRecipient = function() {
  return /** @type{?proto.zb.Recipient} */ (
    jspb.Message.getWrapperField(this, recipient_pb.Recipient, 4));
};


/** @param {?proto.zb.Recipient|undefined} value */
proto.zb.node.grpc.LeaseResponse.prototype.setRecipient = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.zb.node.grpc.LeaseResponse.prototype.clearRecipient = function() {
  this.setRecipient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.node.grpc.LeaseResponse.prototype.hasRecipient = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 amount = 5;
 * @return {number}
 */
proto.zb.node.grpc.LeaseResponse.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.zb.node.grpc.LeaseResponse.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 height = 6;
 * @return {number}
 */
proto.zb.node.grpc.LeaseResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.zb.node.grpc.LeaseResponse.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


goog.object.extend(exports, proto.zb.node.grpc);
