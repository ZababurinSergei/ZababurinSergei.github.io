/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var transaction_pb = require('./transaction_pb.js');
var accounts_api_pb = require('./accounts_api_pb.js');
goog.exportSymbol('proto.zb.node.grpc.AssetInfoResponse', null, global);
goog.exportSymbol('proto.zb.node.grpc.AssetRequest', null, global);
goog.exportSymbol('proto.zb.node.grpc.NFTRequest', null, global);
goog.exportSymbol('proto.zb.node.grpc.NFTResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.AssetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.node.grpc.AssetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.AssetRequest.displayName = 'proto.zb.node.grpc.AssetRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.AssetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.AssetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.AssetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.AssetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: msg.getAssetId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.AssetRequest}
 */
proto.zb.node.grpc.AssetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.AssetRequest;
  return proto.zb.node.grpc.AssetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.AssetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.AssetRequest}
 */
proto.zb.node.grpc.AssetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.AssetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.AssetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.AssetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.AssetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes asset_id = 1;
 * @return {string}
 */
proto.zb.node.grpc.AssetRequest.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes asset_id = 1;
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {string}
 */
proto.zb.node.grpc.AssetRequest.prototype.getAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetId()));
};


/**
 * optional bytes asset_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.AssetRequest.prototype.getAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.AssetRequest.prototype.setAssetId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.NFTRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.node.grpc.NFTRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.NFTRequest.displayName = 'proto.zb.node.grpc.NFTRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.NFTRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.NFTRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.NFTRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.NFTRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    afterAssetId: msg.getAfterAssetId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.NFTRequest}
 */
proto.zb.node.grpc.NFTRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.NFTRequest;
  return proto.zb.node.grpc.NFTRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.NFTRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.NFTRequest}
 */
proto.zb.node.grpc.NFTRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAfterAssetId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.NFTRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.NFTRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.NFTRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.NFTRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAfterAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {string}
 */
proto.zb.node.grpc.NFTRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.zb.node.grpc.NFTRequest.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.NFTRequest.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.NFTRequest.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 limit = 2;
 * @return {number}
 */
proto.zb.node.grpc.NFTRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.zb.node.grpc.NFTRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes after_asset_id = 3;
 * @return {string}
 */
proto.zb.node.grpc.NFTRequest.prototype.getAfterAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes after_asset_id = 3;
 * This is a type-conversion wrapper around `getAfterAssetId()`
 * @return {string}
 */
proto.zb.node.grpc.NFTRequest.prototype.getAfterAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAfterAssetId()));
};


/**
 * optional bytes after_asset_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAfterAssetId()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.NFTRequest.prototype.getAfterAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAfterAssetId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.NFTRequest.prototype.setAfterAssetId = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.NFTResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.node.grpc.NFTResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.NFTResponse.displayName = 'proto.zb.node.grpc.NFTResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.NFTResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.NFTResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.NFTResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.NFTResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: msg.getAssetId_asB64(),
    assetInfo: (f = msg.getAssetInfo()) && proto.zb.node.grpc.AssetInfoResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.NFTResponse}
 */
proto.zb.node.grpc.NFTResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.NFTResponse;
  return proto.zb.node.grpc.NFTResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.NFTResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.NFTResponse}
 */
proto.zb.node.grpc.NFTResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetId(value);
      break;
    case 2:
      var value = new proto.zb.node.grpc.AssetInfoResponse;
      reader.readMessage(value,proto.zb.node.grpc.AssetInfoResponse.deserializeBinaryFromReader);
      msg.setAssetInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.NFTResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.NFTResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.NFTResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.NFTResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAssetInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.zb.node.grpc.AssetInfoResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes asset_id = 1;
 * @return {string}
 */
proto.zb.node.grpc.NFTResponse.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes asset_id = 1;
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {string}
 */
proto.zb.node.grpc.NFTResponse.prototype.getAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetId()));
};


/**
 * optional bytes asset_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.NFTResponse.prototype.getAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.NFTResponse.prototype.setAssetId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional AssetInfoResponse asset_info = 2;
 * @return {?proto.zb.node.grpc.AssetInfoResponse}
 */
proto.zb.node.grpc.NFTResponse.prototype.getAssetInfo = function() {
  return /** @type{?proto.zb.node.grpc.AssetInfoResponse} */ (
    jspb.Message.getWrapperField(this, proto.zb.node.grpc.AssetInfoResponse, 2));
};


/** @param {?proto.zb.node.grpc.AssetInfoResponse|undefined} value */
proto.zb.node.grpc.NFTResponse.prototype.setAssetInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.zb.node.grpc.NFTResponse.prototype.clearAssetInfo = function() {
  this.setAssetInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.node.grpc.NFTResponse.prototype.hasAssetInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.AssetInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.node.grpc.AssetInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.AssetInfoResponse.displayName = 'proto.zb.node.grpc.AssetInfoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.AssetInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.AssetInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.AssetInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.AssetInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuer: msg.getIssuer_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    decimals: jspb.Message.getFieldWithDefault(msg, 4, 0),
    reissuable: jspb.Message.getFieldWithDefault(msg, 5, false),
    totalVolume: jspb.Message.getFieldWithDefault(msg, 6, 0),
    script: (f = msg.getScript()) && accounts_api_pb.ScriptData.toObject(includeInstance, f),
    sponsorship: jspb.Message.getFieldWithDefault(msg, 8, 0),
    issueTransaction: (f = msg.getIssueTransaction()) && transaction_pb.SignedTransaction.toObject(includeInstance, f),
    sponsorBalance: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.AssetInfoResponse}
 */
proto.zb.node.grpc.AssetInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.AssetInfoResponse;
  return proto.zb.node.grpc.AssetInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.AssetInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.AssetInfoResponse}
 */
proto.zb.node.grpc.AssetInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIssuer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDecimals(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReissuable(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalVolume(value);
      break;
    case 7:
      var value = new accounts_api_pb.ScriptData;
      reader.readMessage(value,accounts_api_pb.ScriptData.deserializeBinaryFromReader);
      msg.setScript(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSponsorship(value);
      break;
    case 11:
      var value = new transaction_pb.SignedTransaction;
      reader.readMessage(value,transaction_pb.SignedTransaction.deserializeBinaryFromReader);
      msg.setIssueTransaction(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSponsorBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.AssetInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.AssetInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.AssetInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.AssetInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssuer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getReissuable();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getTotalVolume();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getScript();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      accounts_api_pb.ScriptData.serializeBinaryToWriter
    );
  }
  f = message.getSponsorship();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getIssueTransaction();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      transaction_pb.SignedTransaction.serializeBinaryToWriter
    );
  }
  f = message.getSponsorBalance();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional bytes issuer = 1;
 * @return {string}
 */
proto.zb.node.grpc.AssetInfoResponse.prototype.getIssuer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes issuer = 1;
 * This is a type-conversion wrapper around `getIssuer()`
 * @return {string}
 */
proto.zb.node.grpc.AssetInfoResponse.prototype.getIssuer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIssuer()));
};


/**
 * optional bytes issuer = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIssuer()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.AssetInfoResponse.prototype.getIssuer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIssuer()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.AssetInfoResponse.prototype.setIssuer = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.zb.node.grpc.AssetInfoResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.zb.node.grpc.AssetInfoResponse.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.zb.node.grpc.AssetInfoResponse.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.zb.node.grpc.AssetInfoResponse.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 decimals = 4;
 * @return {number}
 */
proto.zb.node.grpc.AssetInfoResponse.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.zb.node.grpc.AssetInfoResponse.prototype.setDecimals = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool reissuable = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.zb.node.grpc.AssetInfoResponse.prototype.getReissuable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.zb.node.grpc.AssetInfoResponse.prototype.setReissuable = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional int64 total_volume = 6;
 * @return {number}
 */
proto.zb.node.grpc.AssetInfoResponse.prototype.getTotalVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.zb.node.grpc.AssetInfoResponse.prototype.setTotalVolume = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional ScriptData script = 7;
 * @return {?proto.zb.node.grpc.ScriptData}
 */
proto.zb.node.grpc.AssetInfoResponse.prototype.getScript = function() {
  return /** @type{?proto.zb.node.grpc.ScriptData} */ (
    jspb.Message.getWrapperField(this, accounts_api_pb.ScriptData, 7));
};


/** @param {?proto.zb.node.grpc.ScriptData|undefined} value */
proto.zb.node.grpc.AssetInfoResponse.prototype.setScript = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.zb.node.grpc.AssetInfoResponse.prototype.clearScript = function() {
  this.setScript(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.node.grpc.AssetInfoResponse.prototype.hasScript = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 sponsorship = 8;
 * @return {number}
 */
proto.zb.node.grpc.AssetInfoResponse.prototype.getSponsorship = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.zb.node.grpc.AssetInfoResponse.prototype.setSponsorship = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional zb.SignedTransaction issue_transaction = 11;
 * @return {?proto.zb.SignedTransaction}
 */
proto.zb.node.grpc.AssetInfoResponse.prototype.getIssueTransaction = function() {
  return /** @type{?proto.zb.SignedTransaction} */ (
    jspb.Message.getWrapperField(this, transaction_pb.SignedTransaction, 11));
};


/** @param {?proto.zb.SignedTransaction|undefined} value */
proto.zb.node.grpc.AssetInfoResponse.prototype.setIssueTransaction = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.zb.node.grpc.AssetInfoResponse.prototype.clearIssueTransaction = function() {
  this.setIssueTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.node.grpc.AssetInfoResponse.prototype.hasIssueTransaction = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int64 sponsor_balance = 10;
 * @return {number}
 */
proto.zb.node.grpc.AssetInfoResponse.prototype.getSponsorBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.zb.node.grpc.AssetInfoResponse.prototype.setSponsorBalance = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


goog.object.extend(exports, proto.zb.node.grpc);
