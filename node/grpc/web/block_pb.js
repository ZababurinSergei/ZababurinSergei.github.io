/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var transaction_pb = require('./transaction_pb.js');
goog.exportSymbol('proto.zb.Block', null, global);
goog.exportSymbol('proto.zb.Block.Header', null, global);
goog.exportSymbol('proto.zb.MicroBlock', null, global);
goog.exportSymbol('proto.zb.SignedMicroBlock', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zb.Block.repeatedFields_, null);
};
goog.inherits(proto.zb.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.Block.displayName = 'proto.zb.Block';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zb.Block.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.zb.Block.Header.toObject(includeInstance, f),
    signature: msg.getSignature_asB64(),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    transaction_pb.SignedTransaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.Block}
 */
proto.zb.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.Block;
  return proto.zb.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.Block}
 */
proto.zb.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.zb.Block.Header;
      reader.readMessage(value,proto.zb.Block.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 3:
      var value = new transaction_pb.SignedTransaction;
      reader.readMessage(value,transaction_pb.SignedTransaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.zb.Block.Header.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      transaction_pb.SignedTransaction.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.Block.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zb.Block.Header.repeatedFields_, null);
};
goog.inherits(proto.zb.Block.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.Block.Header.displayName = 'proto.zb.Block.Header';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zb.Block.Header.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.Block.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.Block.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.Block.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.Block.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    reference: msg.getReference_asB64(),
    baseTarget: jspb.Message.getFieldWithDefault(msg, 3, 0),
    generationSignature: msg.getGenerationSignature_asB64(),
    featureVotesList: jspb.Message.getRepeatedField(msg, 5),
    timestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    version: jspb.Message.getFieldWithDefault(msg, 7, 0),
    generator: msg.getGenerator_asB64(),
    rewardVote: jspb.Message.getFieldWithDefault(msg, 9, 0),
    transactionsRoot: msg.getTransactionsRoot_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.Block.Header}
 */
proto.zb.Block.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.Block.Header;
  return proto.zb.Block.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.Block.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.Block.Header}
 */
proto.zb.Block.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReference(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBaseTarget(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGenerationSignature(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setFeatureVotesList(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGenerator(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRewardVote(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionsRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.Block.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.Block.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.Block.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.Block.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getReference_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBaseTarget();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getGenerationSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getFeatureVotesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      5,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getGenerator_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getRewardVote();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getTransactionsRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
};


/**
 * optional int32 chain_id = 1;
 * @return {number}
 */
proto.zb.Block.Header.prototype.getChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.zb.Block.Header.prototype.setChainId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes reference = 2;
 * @return {string}
 */
proto.zb.Block.Header.prototype.getReference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes reference = 2;
 * This is a type-conversion wrapper around `getReference()`
 * @return {string}
 */
proto.zb.Block.Header.prototype.getReference_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReference()));
};


/**
 * optional bytes reference = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReference()`
 * @return {!Uint8Array}
 */
proto.zb.Block.Header.prototype.getReference_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReference()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.Block.Header.prototype.setReference = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int64 base_target = 3;
 * @return {number}
 */
proto.zb.Block.Header.prototype.getBaseTarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.zb.Block.Header.prototype.setBaseTarget = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes generation_signature = 4;
 * @return {string}
 */
proto.zb.Block.Header.prototype.getGenerationSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes generation_signature = 4;
 * This is a type-conversion wrapper around `getGenerationSignature()`
 * @return {string}
 */
proto.zb.Block.Header.prototype.getGenerationSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGenerationSignature()));
};


/**
 * optional bytes generation_signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGenerationSignature()`
 * @return {!Uint8Array}
 */
proto.zb.Block.Header.prototype.getGenerationSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGenerationSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.Block.Header.prototype.setGenerationSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated uint32 feature_votes = 5;
 * @return {!Array<number>}
 */
proto.zb.Block.Header.prototype.getFeatureVotesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<number>} value */
proto.zb.Block.Header.prototype.setFeatureVotesList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.zb.Block.Header.prototype.addFeatureVotes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.zb.Block.Header.prototype.clearFeatureVotesList = function() {
  this.setFeatureVotesList([]);
};


/**
 * optional int64 timestamp = 6;
 * @return {number}
 */
proto.zb.Block.Header.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.zb.Block.Header.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 version = 7;
 * @return {number}
 */
proto.zb.Block.Header.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.zb.Block.Header.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes generator = 8;
 * @return {string}
 */
proto.zb.Block.Header.prototype.getGenerator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes generator = 8;
 * This is a type-conversion wrapper around `getGenerator()`
 * @return {string}
 */
proto.zb.Block.Header.prototype.getGenerator_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGenerator()));
};


/**
 * optional bytes generator = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGenerator()`
 * @return {!Uint8Array}
 */
proto.zb.Block.Header.prototype.getGenerator_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGenerator()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.Block.Header.prototype.setGenerator = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional int64 reward_vote = 9;
 * @return {number}
 */
proto.zb.Block.Header.prototype.getRewardVote = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.zb.Block.Header.prototype.setRewardVote = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bytes transactions_root = 10;
 * @return {string}
 */
proto.zb.Block.Header.prototype.getTransactionsRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes transactions_root = 10;
 * This is a type-conversion wrapper around `getTransactionsRoot()`
 * @return {string}
 */
proto.zb.Block.Header.prototype.getTransactionsRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionsRoot()));
};


/**
 * optional bytes transactions_root = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionsRoot()`
 * @return {!Uint8Array}
 */
proto.zb.Block.Header.prototype.getTransactionsRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionsRoot()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.Block.Header.prototype.setTransactionsRoot = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional Header header = 1;
 * @return {?proto.zb.Block.Header}
 */
proto.zb.Block.prototype.getHeader = function() {
  return /** @type{?proto.zb.Block.Header} */ (
    jspb.Message.getWrapperField(this, proto.zb.Block.Header, 1));
};


/** @param {?proto.zb.Block.Header|undefined} value */
proto.zb.Block.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zb.Block.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Block.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {string}
 */
proto.zb.Block.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.zb.Block.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.zb.Block.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.Block.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated SignedTransaction transactions = 3;
 * @return {!Array<!proto.zb.SignedTransaction>}
 */
proto.zb.Block.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.zb.SignedTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, transaction_pb.SignedTransaction, 3));
};


/** @param {!Array<!proto.zb.SignedTransaction>} value */
proto.zb.Block.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.zb.SignedTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zb.SignedTransaction}
 */
proto.zb.Block.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.zb.SignedTransaction, opt_index);
};


proto.zb.Block.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.MicroBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zb.MicroBlock.repeatedFields_, null);
};
goog.inherits(proto.zb.MicroBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.MicroBlock.displayName = 'proto.zb.MicroBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zb.MicroBlock.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.MicroBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.MicroBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.MicroBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.MicroBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    reference: msg.getReference_asB64(),
    updatedBlockSignature: msg.getUpdatedBlockSignature_asB64(),
    senderPublicKey: msg.getSenderPublicKey_asB64(),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    transaction_pb.SignedTransaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.MicroBlock}
 */
proto.zb.MicroBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.MicroBlock;
  return proto.zb.MicroBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.MicroBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.MicroBlock}
 */
proto.zb.MicroBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReference(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUpdatedBlockSignature(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSenderPublicKey(value);
      break;
    case 5:
      var value = new transaction_pb.SignedTransaction;
      reader.readMessage(value,transaction_pb.SignedTransaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.MicroBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.MicroBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.MicroBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.MicroBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getReference_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getUpdatedBlockSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSenderPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      transaction_pb.SignedTransaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.zb.MicroBlock.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.zb.MicroBlock.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes reference = 2;
 * @return {string}
 */
proto.zb.MicroBlock.prototype.getReference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes reference = 2;
 * This is a type-conversion wrapper around `getReference()`
 * @return {string}
 */
proto.zb.MicroBlock.prototype.getReference_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReference()));
};


/**
 * optional bytes reference = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReference()`
 * @return {!Uint8Array}
 */
proto.zb.MicroBlock.prototype.getReference_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReference()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.MicroBlock.prototype.setReference = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes updated_block_signature = 3;
 * @return {string}
 */
proto.zb.MicroBlock.prototype.getUpdatedBlockSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes updated_block_signature = 3;
 * This is a type-conversion wrapper around `getUpdatedBlockSignature()`
 * @return {string}
 */
proto.zb.MicroBlock.prototype.getUpdatedBlockSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUpdatedBlockSignature()));
};


/**
 * optional bytes updated_block_signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUpdatedBlockSignature()`
 * @return {!Uint8Array}
 */
proto.zb.MicroBlock.prototype.getUpdatedBlockSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUpdatedBlockSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.MicroBlock.prototype.setUpdatedBlockSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes sender_public_key = 4;
 * @return {string}
 */
proto.zb.MicroBlock.prototype.getSenderPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes sender_public_key = 4;
 * This is a type-conversion wrapper around `getSenderPublicKey()`
 * @return {string}
 */
proto.zb.MicroBlock.prototype.getSenderPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSenderPublicKey()));
};


/**
 * optional bytes sender_public_key = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderPublicKey()`
 * @return {!Uint8Array}
 */
proto.zb.MicroBlock.prototype.getSenderPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSenderPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.MicroBlock.prototype.setSenderPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated SignedTransaction transactions = 5;
 * @return {!Array<!proto.zb.SignedTransaction>}
 */
proto.zb.MicroBlock.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.zb.SignedTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, transaction_pb.SignedTransaction, 5));
};


/** @param {!Array<!proto.zb.SignedTransaction>} value */
proto.zb.MicroBlock.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.zb.SignedTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zb.SignedTransaction}
 */
proto.zb.MicroBlock.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.zb.SignedTransaction, opt_index);
};


proto.zb.MicroBlock.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.SignedMicroBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.SignedMicroBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.SignedMicroBlock.displayName = 'proto.zb.SignedMicroBlock';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.SignedMicroBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.SignedMicroBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.SignedMicroBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.SignedMicroBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    microBlock: (f = msg.getMicroBlock()) && proto.zb.MicroBlock.toObject(includeInstance, f),
    signature: msg.getSignature_asB64(),
    totalBlockId: msg.getTotalBlockId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.SignedMicroBlock}
 */
proto.zb.SignedMicroBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.SignedMicroBlock;
  return proto.zb.SignedMicroBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.SignedMicroBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.SignedMicroBlock}
 */
proto.zb.SignedMicroBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.zb.MicroBlock;
      reader.readMessage(value,proto.zb.MicroBlock.deserializeBinaryFromReader);
      msg.setMicroBlock(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTotalBlockId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.SignedMicroBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.SignedMicroBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.SignedMicroBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.SignedMicroBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMicroBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.zb.MicroBlock.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTotalBlockId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional MicroBlock micro_block = 1;
 * @return {?proto.zb.MicroBlock}
 */
proto.zb.SignedMicroBlock.prototype.getMicroBlock = function() {
  return /** @type{?proto.zb.MicroBlock} */ (
    jspb.Message.getWrapperField(this, proto.zb.MicroBlock, 1));
};


/** @param {?proto.zb.MicroBlock|undefined} value */
proto.zb.SignedMicroBlock.prototype.setMicroBlock = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zb.SignedMicroBlock.prototype.clearMicroBlock = function() {
  this.setMicroBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.SignedMicroBlock.prototype.hasMicroBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {string}
 */
proto.zb.SignedMicroBlock.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.zb.SignedMicroBlock.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.zb.SignedMicroBlock.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.SignedMicroBlock.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes total_block_id = 3;
 * @return {string}
 */
proto.zb.SignedMicroBlock.prototype.getTotalBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes total_block_id = 3;
 * This is a type-conversion wrapper around `getTotalBlockId()`
 * @return {string}
 */
proto.zb.SignedMicroBlock.prototype.getTotalBlockId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTotalBlockId()));
};


/**
 * optional bytes total_block_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTotalBlockId()`
 * @return {!Uint8Array}
 */
proto.zb.SignedMicroBlock.prototype.getTotalBlockId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTotalBlockId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.SignedMicroBlock.prototype.setTotalBlockId = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


goog.object.extend(exports, proto.zb);
