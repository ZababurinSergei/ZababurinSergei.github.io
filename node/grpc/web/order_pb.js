/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var amount_pb = require('./amount_pb.js');
goog.exportSymbol('proto.zb.AssetPair', null, global);
goog.exportSymbol('proto.zb.Order', null, global);
goog.exportSymbol('proto.zb.Order.Side', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.AssetPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.AssetPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.AssetPair.displayName = 'proto.zb.AssetPair';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.AssetPair.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.AssetPair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.AssetPair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.AssetPair.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountAssetId: msg.getAmountAssetId_asB64(),
    priceAssetId: msg.getPriceAssetId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.AssetPair}
 */
proto.zb.AssetPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.AssetPair;
  return proto.zb.AssetPair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.AssetPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.AssetPair}
 */
proto.zb.AssetPair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmountAssetId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPriceAssetId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.AssetPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.AssetPair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.AssetPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.AssetPair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPriceAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes amount_asset_id = 1;
 * @return {string}
 */
proto.zb.AssetPair.prototype.getAmountAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes amount_asset_id = 1;
 * This is a type-conversion wrapper around `getAmountAssetId()`
 * @return {string}
 */
proto.zb.AssetPair.prototype.getAmountAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmountAssetId()));
};


/**
 * optional bytes amount_asset_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmountAssetId()`
 * @return {!Uint8Array}
 */
proto.zb.AssetPair.prototype.getAmountAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmountAssetId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.AssetPair.prototype.setAmountAssetId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes price_asset_id = 2;
 * @return {string}
 */
proto.zb.AssetPair.prototype.getPriceAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes price_asset_id = 2;
 * This is a type-conversion wrapper around `getPriceAssetId()`
 * @return {string}
 */
proto.zb.AssetPair.prototype.getPriceAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPriceAssetId()));
};


/**
 * optional bytes price_asset_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPriceAssetId()`
 * @return {!Uint8Array}
 */
proto.zb.AssetPair.prototype.getPriceAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPriceAssetId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.AssetPair.prototype.setPriceAssetId = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zb.Order.repeatedFields_, null);
};
goog.inherits(proto.zb.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.Order.displayName = 'proto.zb.Order';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zb.Order.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    senderPublicKey: msg.getSenderPublicKey_asB64(),
    matcherPublicKey: msg.getMatcherPublicKey_asB64(),
    assetPair: (f = msg.getAssetPair()) && proto.zb.AssetPair.toObject(includeInstance, f),
    orderSide: jspb.Message.getFieldWithDefault(msg, 5, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    price: jspb.Message.getFieldWithDefault(msg, 7, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 8, 0),
    expiration: jspb.Message.getFieldWithDefault(msg, 9, 0),
    matcherFee: (f = msg.getMatcherFee()) && amount_pb.Amount.toObject(includeInstance, f),
    version: jspb.Message.getFieldWithDefault(msg, 11, 0),
    proofsList: msg.getProofsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.Order}
 */
proto.zb.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.Order;
  return proto.zb.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.Order}
 */
proto.zb.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSenderPublicKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMatcherPublicKey(value);
      break;
    case 4:
      var value = new proto.zb.AssetPair;
      reader.readMessage(value,proto.zb.AssetPair.deserializeBinaryFromReader);
      msg.setAssetPair(value);
      break;
    case 5:
      var value = /** @type {!proto.zb.Order.Side} */ (reader.readEnum());
      msg.setOrderSide(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPrice(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpiration(value);
      break;
    case 10:
      var value = new amount_pb.Amount;
      reader.readMessage(value,amount_pb.Amount.deserializeBinaryFromReader);
      msg.setMatcherFee(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addProofs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSenderPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMatcherPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAssetPair();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.zb.AssetPair.serializeBinaryToWriter
    );
  }
  f = message.getOrderSide();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getExpiration();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getMatcherFee();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      amount_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getProofsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      12,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.zb.Order.Side = {
  BUY: 0,
  SELL: 1
};

/**
 * optional int32 chain_id = 1;
 * @return {number}
 */
proto.zb.Order.prototype.getChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.zb.Order.prototype.setChainId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes sender_public_key = 2;
 * @return {string}
 */
proto.zb.Order.prototype.getSenderPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sender_public_key = 2;
 * This is a type-conversion wrapper around `getSenderPublicKey()`
 * @return {string}
 */
proto.zb.Order.prototype.getSenderPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSenderPublicKey()));
};


/**
 * optional bytes sender_public_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderPublicKey()`
 * @return {!Uint8Array}
 */
proto.zb.Order.prototype.getSenderPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSenderPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.Order.prototype.setSenderPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes matcher_public_key = 3;
 * @return {string}
 */
proto.zb.Order.prototype.getMatcherPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes matcher_public_key = 3;
 * This is a type-conversion wrapper around `getMatcherPublicKey()`
 * @return {string}
 */
proto.zb.Order.prototype.getMatcherPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMatcherPublicKey()));
};


/**
 * optional bytes matcher_public_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMatcherPublicKey()`
 * @return {!Uint8Array}
 */
proto.zb.Order.prototype.getMatcherPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMatcherPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.Order.prototype.setMatcherPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional AssetPair asset_pair = 4;
 * @return {?proto.zb.AssetPair}
 */
proto.zb.Order.prototype.getAssetPair = function() {
  return /** @type{?proto.zb.AssetPair} */ (
    jspb.Message.getWrapperField(this, proto.zb.AssetPair, 4));
};


/** @param {?proto.zb.AssetPair|undefined} value */
proto.zb.Order.prototype.setAssetPair = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.zb.Order.prototype.clearAssetPair = function() {
  this.setAssetPair(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Order.prototype.hasAssetPair = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Side order_side = 5;
 * @return {!proto.zb.Order.Side}
 */
proto.zb.Order.prototype.getOrderSide = function() {
  return /** @type {!proto.zb.Order.Side} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.zb.Order.Side} value */
proto.zb.Order.prototype.setOrderSide = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional int64 amount = 6;
 * @return {number}
 */
proto.zb.Order.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.zb.Order.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 price = 7;
 * @return {number}
 */
proto.zb.Order.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.zb.Order.prototype.setPrice = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 timestamp = 8;
 * @return {number}
 */
proto.zb.Order.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.zb.Order.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 expiration = 9;
 * @return {number}
 */
proto.zb.Order.prototype.getExpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.zb.Order.prototype.setExpiration = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional Amount matcher_fee = 10;
 * @return {?proto.zb.Amount}
 */
proto.zb.Order.prototype.getMatcherFee = function() {
  return /** @type{?proto.zb.Amount} */ (
    jspb.Message.getWrapperField(this, amount_pb.Amount, 10));
};


/** @param {?proto.zb.Amount|undefined} value */
proto.zb.Order.prototype.setMatcherFee = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.zb.Order.prototype.clearMatcherFee = function() {
  this.setMatcherFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.Order.prototype.hasMatcherFee = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 version = 11;
 * @return {number}
 */
proto.zb.Order.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.zb.Order.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * repeated bytes proofs = 12;
 * @return {!Array<string>}
 */
proto.zb.Order.prototype.getProofsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 12));
};


/**
 * repeated bytes proofs = 12;
 * This is a type-conversion wrapper around `getProofsList()`
 * @return {!Array<string>}
 */
proto.zb.Order.prototype.getProofsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getProofsList()));
};


/**
 * repeated bytes proofs = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.zb.Order.prototype.getProofsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getProofsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.zb.Order.prototype.setProofsList = function(value) {
  jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.zb.Order.prototype.addProofs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


proto.zb.Order.prototype.clearProofsList = function() {
  this.setProofsList([]);
};


goog.object.extend(exports, proto.zb);
