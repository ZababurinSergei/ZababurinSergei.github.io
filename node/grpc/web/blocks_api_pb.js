/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var block_pb = require('./block_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.exportSymbol('proto.zb.node.grpc.BlockRangeRequest', null, global);
goog.exportSymbol('proto.zb.node.grpc.BlockRequest', null, global);
goog.exportSymbol('proto.zb.node.grpc.BlockWithHeight', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.BlockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.zb.node.grpc.BlockRequest.oneofGroups_);
};
goog.inherits(proto.zb.node.grpc.BlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.BlockRequest.displayName = 'proto.zb.node.grpc.BlockRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.zb.node.grpc.BlockRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.zb.node.grpc.BlockRequest.RequestCase = {
  REQUEST_NOT_SET: 0,
  BLOCK_ID: 1,
  HEIGHT: 2
};

/**
 * @return {proto.zb.node.grpc.BlockRequest.RequestCase}
 */
proto.zb.node.grpc.BlockRequest.prototype.getRequestCase = function() {
  return /** @type {proto.zb.node.grpc.BlockRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.zb.node.grpc.BlockRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.BlockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.BlockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.BlockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.BlockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockId: msg.getBlockId_asB64(),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    includeTransactions: jspb.Message.getFieldWithDefault(msg, 100, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.BlockRequest}
 */
proto.zb.node.grpc.BlockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.BlockRequest;
  return proto.zb.node.grpc.BlockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.BlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.BlockRequest}
 */
proto.zb.node.grpc.BlockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 100:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.BlockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.BlockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.BlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.BlockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getIncludeTransactions();
  if (f) {
    writer.writeBool(
      100,
      f
    );
  }
};


/**
 * optional bytes block_id = 1;
 * @return {string}
 */
proto.zb.node.grpc.BlockRequest.prototype.getBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes block_id = 1;
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {string}
 */
proto.zb.node.grpc.BlockRequest.prototype.getBlockId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockId()));
};


/**
 * optional bytes block_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.BlockRequest.prototype.getBlockId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockId()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.BlockRequest.prototype.setBlockId = function(value) {
  jspb.Message.setOneofField(this, 1, proto.zb.node.grpc.BlockRequest.oneofGroups_[0], value);
};


proto.zb.node.grpc.BlockRequest.prototype.clearBlockId = function() {
  jspb.Message.setOneofField(this, 1, proto.zb.node.grpc.BlockRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.node.grpc.BlockRequest.prototype.hasBlockId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 height = 2;
 * @return {number}
 */
proto.zb.node.grpc.BlockRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.zb.node.grpc.BlockRequest.prototype.setHeight = function(value) {
  jspb.Message.setOneofField(this, 2, proto.zb.node.grpc.BlockRequest.oneofGroups_[0], value);
};


proto.zb.node.grpc.BlockRequest.prototype.clearHeight = function() {
  jspb.Message.setOneofField(this, 2, proto.zb.node.grpc.BlockRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.node.grpc.BlockRequest.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool include_transactions = 100;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.zb.node.grpc.BlockRequest.prototype.getIncludeTransactions = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 100, false));
};


/** @param {boolean} value */
proto.zb.node.grpc.BlockRequest.prototype.setIncludeTransactions = function(value) {
  jspb.Message.setProto3BooleanField(this, 100, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.BlockRangeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.zb.node.grpc.BlockRangeRequest.oneofGroups_);
};
goog.inherits(proto.zb.node.grpc.BlockRangeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.BlockRangeRequest.displayName = 'proto.zb.node.grpc.BlockRangeRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.zb.node.grpc.BlockRangeRequest.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.zb.node.grpc.BlockRangeRequest.FilterCase = {
  FILTER_NOT_SET: 0,
  GENERATOR_PUBLIC_KEY: 3,
  GENERATOR_ADDRESS: 4
};

/**
 * @return {proto.zb.node.grpc.BlockRangeRequest.FilterCase}
 */
proto.zb.node.grpc.BlockRangeRequest.prototype.getFilterCase = function() {
  return /** @type {proto.zb.node.grpc.BlockRangeRequest.FilterCase} */(jspb.Message.computeOneofCase(this, proto.zb.node.grpc.BlockRangeRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.BlockRangeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.BlockRangeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.BlockRangeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.BlockRangeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    toHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    generatorPublicKey: msg.getGeneratorPublicKey_asB64(),
    generatorAddress: msg.getGeneratorAddress_asB64(),
    includeTransactions: jspb.Message.getFieldWithDefault(msg, 100, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.BlockRangeRequest}
 */
proto.zb.node.grpc.BlockRangeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.BlockRangeRequest;
  return proto.zb.node.grpc.BlockRangeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.BlockRangeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.BlockRangeRequest}
 */
proto.zb.node.grpc.BlockRangeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFromHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setToHeight(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGeneratorPublicKey(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGeneratorAddress(value);
      break;
    case 100:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.BlockRangeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.BlockRangeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.BlockRangeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.BlockRangeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromHeight();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getToHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getIncludeTransactions();
  if (f) {
    writer.writeBool(
      100,
      f
    );
  }
};


/**
 * optional uint32 from_height = 1;
 * @return {number}
 */
proto.zb.node.grpc.BlockRangeRequest.prototype.getFromHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.zb.node.grpc.BlockRangeRequest.prototype.setFromHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 to_height = 2;
 * @return {number}
 */
proto.zb.node.grpc.BlockRangeRequest.prototype.getToHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.zb.node.grpc.BlockRangeRequest.prototype.setToHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes generator_public_key = 3;
 * @return {string}
 */
proto.zb.node.grpc.BlockRangeRequest.prototype.getGeneratorPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes generator_public_key = 3;
 * This is a type-conversion wrapper around `getGeneratorPublicKey()`
 * @return {string}
 */
proto.zb.node.grpc.BlockRangeRequest.prototype.getGeneratorPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGeneratorPublicKey()));
};


/**
 * optional bytes generator_public_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGeneratorPublicKey()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.BlockRangeRequest.prototype.getGeneratorPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGeneratorPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.BlockRangeRequest.prototype.setGeneratorPublicKey = function(value) {
  jspb.Message.setOneofField(this, 3, proto.zb.node.grpc.BlockRangeRequest.oneofGroups_[0], value);
};


proto.zb.node.grpc.BlockRangeRequest.prototype.clearGeneratorPublicKey = function() {
  jspb.Message.setOneofField(this, 3, proto.zb.node.grpc.BlockRangeRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.node.grpc.BlockRangeRequest.prototype.hasGeneratorPublicKey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes generator_address = 4;
 * @return {string}
 */
proto.zb.node.grpc.BlockRangeRequest.prototype.getGeneratorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes generator_address = 4;
 * This is a type-conversion wrapper around `getGeneratorAddress()`
 * @return {string}
 */
proto.zb.node.grpc.BlockRangeRequest.prototype.getGeneratorAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGeneratorAddress()));
};


/**
 * optional bytes generator_address = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGeneratorAddress()`
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.BlockRangeRequest.prototype.getGeneratorAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGeneratorAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.zb.node.grpc.BlockRangeRequest.prototype.setGeneratorAddress = function(value) {
  jspb.Message.setOneofField(this, 4, proto.zb.node.grpc.BlockRangeRequest.oneofGroups_[0], value);
};


proto.zb.node.grpc.BlockRangeRequest.prototype.clearGeneratorAddress = function() {
  jspb.Message.setOneofField(this, 4, proto.zb.node.grpc.BlockRangeRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.node.grpc.BlockRangeRequest.prototype.hasGeneratorAddress = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool include_transactions = 100;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.zb.node.grpc.BlockRangeRequest.prototype.getIncludeTransactions = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 100, false));
};


/** @param {boolean} value */
proto.zb.node.grpc.BlockRangeRequest.prototype.setIncludeTransactions = function(value) {
  jspb.Message.setProto3BooleanField(this, 100, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zb.node.grpc.BlockWithHeight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zb.node.grpc.BlockWithHeight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zb.node.grpc.BlockWithHeight.displayName = 'proto.zb.node.grpc.BlockWithHeight';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zb.node.grpc.BlockWithHeight.prototype.toObject = function(opt_includeInstance) {
  return proto.zb.node.grpc.BlockWithHeight.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zb.node.grpc.BlockWithHeight} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.BlockWithHeight.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: (f = msg.getBlock()) && block_pb.Block.toObject(includeInstance, f),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zb.node.grpc.BlockWithHeight}
 */
proto.zb.node.grpc.BlockWithHeight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zb.node.grpc.BlockWithHeight;
  return proto.zb.node.grpc.BlockWithHeight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zb.node.grpc.BlockWithHeight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zb.node.grpc.BlockWithHeight}
 */
proto.zb.node.grpc.BlockWithHeight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new block_pb.Block;
      reader.readMessage(value,block_pb.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zb.node.grpc.BlockWithHeight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zb.node.grpc.BlockWithHeight.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zb.node.grpc.BlockWithHeight} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zb.node.grpc.BlockWithHeight.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      block_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional zb.Block block = 1;
 * @return {?proto.zb.Block}
 */
proto.zb.node.grpc.BlockWithHeight.prototype.getBlock = function() {
  return /** @type{?proto.zb.Block} */ (
    jspb.Message.getWrapperField(this, block_pb.Block, 1));
};


/** @param {?proto.zb.Block|undefined} value */
proto.zb.node.grpc.BlockWithHeight.prototype.setBlock = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.zb.node.grpc.BlockWithHeight.prototype.clearBlock = function() {
  this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zb.node.grpc.BlockWithHeight.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 height = 2;
 * @return {number}
 */
proto.zb.node.grpc.BlockWithHeight.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.zb.node.grpc.BlockWithHeight.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.zb.node.grpc);
